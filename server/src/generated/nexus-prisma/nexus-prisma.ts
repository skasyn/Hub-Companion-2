/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      UserPresence: UserPresenceObject
      Activity: ActivityObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      ActivityConnection: ActivityConnectionObject
      ActivityEdge: ActivityEdgeObject
      AggregateActivity: AggregateActivityObject
      UserPresenceConnection: UserPresenceConnectionObject
      UserPresenceEdge: UserPresenceEdgeObject
      AggregateUserPresence: AggregateUserPresenceObject
      ExperienceProject: ExperienceProjectObject
      ProjectMessages: ProjectMessagesObject
      ExperienceProjectConnection: ExperienceProjectConnectionObject
      ExperienceProjectEdge: ExperienceProjectEdgeObject
      AggregateExperienceProject: AggregateExperienceProjectObject
      Maker: MakerObject
      MakerConnection: MakerConnectionObject
      MakerEdge: MakerEdgeObject
      AggregateMaker: AggregateMakerObject
      Sharing: SharingObject
      SharingConnection: SharingConnectionObject
      SharingEdge: SharingEdgeObject
      AggregateSharing: AggregateSharingObject
      ProjectMessagesConnection: ProjectMessagesConnectionObject
      ProjectMessagesEdge: ProjectMessagesEdgeObject
      AggregateProjectMessages: AggregateProjectMessagesObject
      DatabaseRefresh: DatabaseRefreshObject
      DatabaseRefreshConnection: DatabaseRefreshConnectionObject
      DatabaseRefreshEdge: DatabaseRefreshEdgeObject
      AggregateDatabaseRefresh: AggregateDatabaseRefreshObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      ActivitySubscriptionPayload: ActivitySubscriptionPayloadObject
      ActivityPreviousValues: ActivityPreviousValuesObject
      UserPresenceSubscriptionPayload: UserPresenceSubscriptionPayloadObject
      UserPresencePreviousValues: UserPresencePreviousValuesObject
      ExperienceProjectSubscriptionPayload: ExperienceProjectSubscriptionPayloadObject
      ExperienceProjectPreviousValues: ExperienceProjectPreviousValuesObject
      MakerSubscriptionPayload: MakerSubscriptionPayloadObject
      MakerPreviousValues: MakerPreviousValuesObject
      SharingSubscriptionPayload: SharingSubscriptionPayloadObject
      SharingPreviousValues: SharingPreviousValuesObject
      ProjectMessagesSubscriptionPayload: ProjectMessagesSubscriptionPayloadObject
      ProjectMessagesPreviousValues: ProjectMessagesPreviousValuesObject
      DatabaseRefreshSubscriptionPayload: DatabaseRefreshSubscriptionPayloadObject
      DatabaseRefreshPreviousValues: DatabaseRefreshPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      UserPresence: UserPresenceFieldDetails
      Activity: ActivityFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      ActivityConnection: ActivityConnectionFieldDetails
      ActivityEdge: ActivityEdgeFieldDetails
      AggregateActivity: AggregateActivityFieldDetails
      UserPresenceConnection: UserPresenceConnectionFieldDetails
      UserPresenceEdge: UserPresenceEdgeFieldDetails
      AggregateUserPresence: AggregateUserPresenceFieldDetails
      ExperienceProject: ExperienceProjectFieldDetails
      ProjectMessages: ProjectMessagesFieldDetails
      ExperienceProjectConnection: ExperienceProjectConnectionFieldDetails
      ExperienceProjectEdge: ExperienceProjectEdgeFieldDetails
      AggregateExperienceProject: AggregateExperienceProjectFieldDetails
      Maker: MakerFieldDetails
      MakerConnection: MakerConnectionFieldDetails
      MakerEdge: MakerEdgeFieldDetails
      AggregateMaker: AggregateMakerFieldDetails
      Sharing: SharingFieldDetails
      SharingConnection: SharingConnectionFieldDetails
      SharingEdge: SharingEdgeFieldDetails
      AggregateSharing: AggregateSharingFieldDetails
      ProjectMessagesConnection: ProjectMessagesConnectionFieldDetails
      ProjectMessagesEdge: ProjectMessagesEdgeFieldDetails
      AggregateProjectMessages: AggregateProjectMessagesFieldDetails
      DatabaseRefresh: DatabaseRefreshFieldDetails
      DatabaseRefreshConnection: DatabaseRefreshConnectionFieldDetails
      DatabaseRefreshEdge: DatabaseRefreshEdgeFieldDetails
      AggregateDatabaseRefresh: AggregateDatabaseRefreshFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      ActivitySubscriptionPayload: ActivitySubscriptionPayloadFieldDetails
      ActivityPreviousValues: ActivityPreviousValuesFieldDetails
      UserPresenceSubscriptionPayload: UserPresenceSubscriptionPayloadFieldDetails
      UserPresencePreviousValues: UserPresencePreviousValuesFieldDetails
      ExperienceProjectSubscriptionPayload: ExperienceProjectSubscriptionPayloadFieldDetails
      ExperienceProjectPreviousValues: ExperienceProjectPreviousValuesFieldDetails
      MakerSubscriptionPayload: MakerSubscriptionPayloadFieldDetails
      MakerPreviousValues: MakerPreviousValuesFieldDetails
      SharingSubscriptionPayload: SharingSubscriptionPayloadFieldDetails
      SharingPreviousValues: SharingPreviousValuesFieldDetails
      ProjectMessagesSubscriptionPayload: ProjectMessagesSubscriptionPayloadFieldDetails
      ProjectMessagesPreviousValues: ProjectMessagesPreviousValuesFieldDetails
      DatabaseRefreshSubscriptionPayload: DatabaseRefreshSubscriptionPayloadFieldDetails
      DatabaseRefreshPreviousValues: DatabaseRefreshPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserPresenceWhereInput: UserPresenceWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      ActivityWhereInput: ActivityWhereInputInputObject
      ActivityWhereUniqueInput: ActivityWhereUniqueInputInputObject
      UserPresenceWhereUniqueInput: UserPresenceWhereUniqueInputInputObject
      ExperienceProjectWhereUniqueInput: ExperienceProjectWhereUniqueInputInputObject
      ProjectMessagesWhereInput: ProjectMessagesWhereInputInputObject
      ExperienceProjectWhereInput: ExperienceProjectWhereInputInputObject
      MakerWhereUniqueInput: MakerWhereUniqueInputInputObject
      MakerWhereInput: MakerWhereInputInputObject
      SharingWhereUniqueInput: SharingWhereUniqueInputInputObject
      SharingWhereInput: SharingWhereInputInputObject
      ProjectMessagesWhereUniqueInput: ProjectMessagesWhereUniqueInputInputObject
      DatabaseRefreshWhereUniqueInput: DatabaseRefreshWhereUniqueInputInputObject
      DatabaseRefreshWhereInput: DatabaseRefreshWhereInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserPresenceCreateManyWithoutUserInput: UserPresenceCreateManyWithoutUserInputInputObject
      UserPresenceCreateWithoutUserInput: UserPresenceCreateWithoutUserInputInputObject
      ActivityCreateOneWithoutRegisteredInput: ActivityCreateOneWithoutRegisteredInputInputObject
      ActivityCreateWithoutRegisteredInput: ActivityCreateWithoutRegisteredInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserPresenceUpdateManyWithoutUserInput: UserPresenceUpdateManyWithoutUserInputInputObject
      UserPresenceUpdateWithWhereUniqueWithoutUserInput: UserPresenceUpdateWithWhereUniqueWithoutUserInputInputObject
      UserPresenceUpdateWithoutUserDataInput: UserPresenceUpdateWithoutUserDataInputInputObject
      ActivityUpdateOneRequiredWithoutRegisteredInput: ActivityUpdateOneRequiredWithoutRegisteredInputInputObject
      ActivityUpdateWithoutRegisteredDataInput: ActivityUpdateWithoutRegisteredDataInputInputObject
      ActivityUpsertWithoutRegisteredInput: ActivityUpsertWithoutRegisteredInputInputObject
      UserPresenceUpsertWithWhereUniqueWithoutUserInput: UserPresenceUpsertWithWhereUniqueWithoutUserInputInputObject
      UserPresenceScalarWhereInput: UserPresenceScalarWhereInputInputObject
      UserPresenceUpdateManyWithWhereNestedInput: UserPresenceUpdateManyWithWhereNestedInputInputObject
      UserPresenceUpdateManyDataInput: UserPresenceUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      ActivityCreateInput: ActivityCreateInputInputObject
      UserPresenceCreateManyWithoutActivityInput: UserPresenceCreateManyWithoutActivityInputInputObject
      UserPresenceCreateWithoutActivityInput: UserPresenceCreateWithoutActivityInputInputObject
      UserCreateOneWithoutActivitiesInput: UserCreateOneWithoutActivitiesInputInputObject
      UserCreateWithoutActivitiesInput: UserCreateWithoutActivitiesInputInputObject
      ActivityUpdateInput: ActivityUpdateInputInputObject
      UserPresenceUpdateManyWithoutActivityInput: UserPresenceUpdateManyWithoutActivityInputInputObject
      UserPresenceUpdateWithWhereUniqueWithoutActivityInput: UserPresenceUpdateWithWhereUniqueWithoutActivityInputInputObject
      UserPresenceUpdateWithoutActivityDataInput: UserPresenceUpdateWithoutActivityDataInputInputObject
      UserUpdateOneRequiredWithoutActivitiesInput: UserUpdateOneRequiredWithoutActivitiesInputInputObject
      UserUpdateWithoutActivitiesDataInput: UserUpdateWithoutActivitiesDataInputInputObject
      UserUpsertWithoutActivitiesInput: UserUpsertWithoutActivitiesInputInputObject
      UserPresenceUpsertWithWhereUniqueWithoutActivityInput: UserPresenceUpsertWithWhereUniqueWithoutActivityInputInputObject
      ActivityUpdateManyMutationInput: ActivityUpdateManyMutationInputInputObject
      UserPresenceCreateInput: UserPresenceCreateInputInputObject
      UserPresenceUpdateInput: UserPresenceUpdateInputInputObject
      UserPresenceUpdateManyMutationInput: UserPresenceUpdateManyMutationInputInputObject
      ExperienceProjectCreateInput: ExperienceProjectCreateInputInputObject
      ProjectMessagesCreateManyInput: ProjectMessagesCreateManyInputInputObject
      ProjectMessagesCreateInput: ProjectMessagesCreateInputInputObject
      ExperienceProjectUpdateInput: ExperienceProjectUpdateInputInputObject
      ProjectMessagesUpdateManyInput: ProjectMessagesUpdateManyInputInputObject
      ProjectMessagesUpdateWithWhereUniqueNestedInput: ProjectMessagesUpdateWithWhereUniqueNestedInputInputObject
      ProjectMessagesUpdateDataInput: ProjectMessagesUpdateDataInputInputObject
      ProjectMessagesUpsertWithWhereUniqueNestedInput: ProjectMessagesUpsertWithWhereUniqueNestedInputInputObject
      ProjectMessagesScalarWhereInput: ProjectMessagesScalarWhereInputInputObject
      ProjectMessagesUpdateManyWithWhereNestedInput: ProjectMessagesUpdateManyWithWhereNestedInputInputObject
      ProjectMessagesUpdateManyDataInput: ProjectMessagesUpdateManyDataInputInputObject
      ExperienceProjectUpdateManyMutationInput: ExperienceProjectUpdateManyMutationInputInputObject
      MakerCreateInput: MakerCreateInputInputObject
      MakerCreateco_workersInput: MakerCreateco_workersInputInputObject
      MakerUpdateInput: MakerUpdateInputInputObject
      MakerUpdateco_workersInput: MakerUpdateco_workersInputInputObject
      MakerUpdateManyMutationInput: MakerUpdateManyMutationInputInputObject
      SharingCreateInput: SharingCreateInputInputObject
      SharingCreateco_workersInput: SharingCreateco_workersInputInputObject
      SharingUpdateInput: SharingUpdateInputInputObject
      SharingUpdateco_workersInput: SharingUpdateco_workersInputInputObject
      SharingUpdateManyMutationInput: SharingUpdateManyMutationInputInputObject
      ProjectMessagesUpdateInput: ProjectMessagesUpdateInputInputObject
      ProjectMessagesUpdateManyMutationInput: ProjectMessagesUpdateManyMutationInputInputObject
      DatabaseRefreshCreateInput: DatabaseRefreshCreateInputInputObject
      DatabaseRefreshUpdateInput: DatabaseRefreshUpdateInputInputObject
      DatabaseRefreshUpdateManyMutationInput: DatabaseRefreshUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      ActivitySubscriptionWhereInput: ActivitySubscriptionWhereInputInputObject
      UserPresenceSubscriptionWhereInput: UserPresenceSubscriptionWhereInputInputObject
      ExperienceProjectSubscriptionWhereInput: ExperienceProjectSubscriptionWhereInputInputObject
      MakerSubscriptionWhereInput: MakerSubscriptionWhereInputInputObject
      SharingSubscriptionWhereInput: SharingSubscriptionWhereInputInputObject
      ProjectMessagesSubscriptionWhereInput: ProjectMessagesSubscriptionWhereInputInputObject
      DatabaseRefreshSubscriptionWhereInput: DatabaseRefreshSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    UserPresenceOrderByInput: UserPresenceOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    ActivityOrderByInput: ActivityOrderByInputValues,
    ProjectMessagesOrderByInput: ProjectMessagesOrderByInputValues,
    ExperienceProjectOrderByInput: ExperienceProjectOrderByInputValues,
    MakerOrderByInput: MakerOrderByInputValues,
    SharingOrderByInput: SharingOrderByInputValues,
    DatabaseRefreshOrderByInput: DatabaseRefreshOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'activity', args?: QueryActivityArgs[] | false, alias?: string  } 
  | { name: 'activities', args?: QueryActivitiesArgs[] | false, alias?: string  } 
  | { name: 'activitiesConnection', args?: QueryActivitiesConnectionArgs[] | false, alias?: string  } 
  | { name: 'userPresence', args?: QueryUserPresenceArgs[] | false, alias?: string  } 
  | { name: 'userPresences', args?: QueryUserPresencesArgs[] | false, alias?: string  } 
  | { name: 'userPresencesConnection', args?: QueryUserPresencesConnectionArgs[] | false, alias?: string  } 
  | { name: 'experienceProject', args?: QueryExperienceProjectArgs[] | false, alias?: string  } 
  | { name: 'experienceProjects', args?: QueryExperienceProjectsArgs[] | false, alias?: string  } 
  | { name: 'experienceProjectsConnection', args?: QueryExperienceProjectsConnectionArgs[] | false, alias?: string  } 
  | { name: 'maker', args?: QueryMakerArgs[] | false, alias?: string  } 
  | { name: 'makers', args?: QueryMakersArgs[] | false, alias?: string  } 
  | { name: 'makersConnection', args?: QueryMakersConnectionArgs[] | false, alias?: string  } 
  | { name: 'sharing', args?: QuerySharingArgs[] | false, alias?: string  } 
  | { name: 'sharings', args?: QuerySharingsArgs[] | false, alias?: string  } 
  | { name: 'sharingsConnection', args?: QuerySharingsConnectionArgs[] | false, alias?: string  } 
  | { name: 'projectMessages', args?: QueryProjectMessagesArgs[] | false, alias?: string  } 
  | { name: 'projectMessageses', args?: QueryProjectMessagesesArgs[] | false, alias?: string  } 
  | { name: 'projectMessagesesConnection', args?: QueryProjectMessagesesConnectionArgs[] | false, alias?: string  } 
  | { name: 'databaseRefresh', args?: QueryDatabaseRefreshArgs[] | false, alias?: string  } 
  | { name: 'databaseRefreshes', args?: QueryDatabaseRefreshesArgs[] | false, alias?: string  } 
  | { name: 'databaseRefreshesConnection', args?: QueryDatabaseRefreshesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'activity'
  | 'activities'
  | 'activitiesConnection'
  | 'userPresence'
  | 'userPresences'
  | 'userPresencesConnection'
  | 'experienceProject'
  | 'experienceProjects'
  | 'experienceProjectsConnection'
  | 'maker'
  | 'makers'
  | 'makersConnection'
  | 'sharing'
  | 'sharings'
  | 'sharingsConnection'
  | 'projectMessages'
  | 'projectMessageses'
  | 'projectMessagesesConnection'
  | 'databaseRefresh'
  | 'databaseRefreshes'
  | 'databaseRefreshesConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryActivityArgs =
  | 'where'
type QueryActivitiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryActivitiesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserPresenceArgs =
  | 'where'
type QueryUserPresencesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserPresencesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryExperienceProjectArgs =
  | 'where'
type QueryExperienceProjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryExperienceProjectsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMakerArgs =
  | 'where'
type QueryMakersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMakersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySharingArgs =
  | 'where'
type QuerySharingsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySharingsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectMessagesArgs =
  | 'where'
type QueryProjectMessagesesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectMessagesesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDatabaseRefreshArgs =
  | 'where'
type QueryDatabaseRefreshesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDatabaseRefreshesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  activity: {
    type: 'Activity'
    args: Record<QueryActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity | null> | prisma.Activity | null
  }
  activities: {
    type: 'Activity'
    args: Record<QueryActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ActivityWhereInput | null, orderBy?: prisma.ActivityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity[]> | prisma.Activity[]
  }
  activitiesConnection: {
    type: 'ActivityConnection'
    args: Record<QueryActivitiesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ActivityWhereInput | null, orderBy?: prisma.ActivityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActivityConnection> | prisma.ActivityConnection
  }
  userPresence: {
    type: 'UserPresence'
    args: Record<QueryUserPresenceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserPresenceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPresence | null> | prisma.UserPresence | null
  }
  userPresences: {
    type: 'UserPresence'
    args: Record<QueryUserPresencesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserPresenceWhereInput | null, orderBy?: prisma.UserPresenceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPresence[]> | prisma.UserPresence[]
  }
  userPresencesConnection: {
    type: 'UserPresenceConnection'
    args: Record<QueryUserPresencesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserPresenceWhereInput | null, orderBy?: prisma.UserPresenceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPresenceConnection> | prisma.UserPresenceConnection
  }
  experienceProject: {
    type: 'ExperienceProject'
    args: Record<QueryExperienceProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ExperienceProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExperienceProject | null> | prisma.ExperienceProject | null
  }
  experienceProjects: {
    type: 'ExperienceProject'
    args: Record<QueryExperienceProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ExperienceProjectWhereInput | null, orderBy?: prisma.ExperienceProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExperienceProject[]> | prisma.ExperienceProject[]
  }
  experienceProjectsConnection: {
    type: 'ExperienceProjectConnection'
    args: Record<QueryExperienceProjectsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ExperienceProjectWhereInput | null, orderBy?: prisma.ExperienceProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExperienceProjectConnection> | prisma.ExperienceProjectConnection
  }
  maker: {
    type: 'Maker'
    args: Record<QueryMakerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MakerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Maker | null> | prisma.Maker | null
  }
  makers: {
    type: 'Maker'
    args: Record<QueryMakersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MakerWhereInput | null, orderBy?: prisma.MakerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Maker[]> | prisma.Maker[]
  }
  makersConnection: {
    type: 'MakerConnection'
    args: Record<QueryMakersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MakerWhereInput | null, orderBy?: prisma.MakerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MakerConnection> | prisma.MakerConnection
  }
  sharing: {
    type: 'Sharing'
    args: Record<QuerySharingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SharingWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Sharing | null> | prisma.Sharing | null
  }
  sharings: {
    type: 'Sharing'
    args: Record<QuerySharingsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SharingWhereInput | null, orderBy?: prisma.SharingOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Sharing[]> | prisma.Sharing[]
  }
  sharingsConnection: {
    type: 'SharingConnection'
    args: Record<QuerySharingsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SharingWhereInput | null, orderBy?: prisma.SharingOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SharingConnection> | prisma.SharingConnection
  }
  projectMessages: {
    type: 'ProjectMessages'
    args: Record<QueryProjectMessagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectMessagesWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectMessages | null> | prisma.ProjectMessages | null
  }
  projectMessageses: {
    type: 'ProjectMessages'
    args: Record<QueryProjectMessagesesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectMessagesWhereInput | null, orderBy?: prisma.ProjectMessagesOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectMessages[]> | prisma.ProjectMessages[]
  }
  projectMessagesesConnection: {
    type: 'ProjectMessagesConnection'
    args: Record<QueryProjectMessagesesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectMessagesWhereInput | null, orderBy?: prisma.ProjectMessagesOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectMessagesConnection> | prisma.ProjectMessagesConnection
  }
  databaseRefresh: {
    type: 'DatabaseRefresh'
    args: Record<QueryDatabaseRefreshArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: DatabaseRefreshWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DatabaseRefresh | null> | prisma.DatabaseRefresh | null
  }
  databaseRefreshes: {
    type: 'DatabaseRefresh'
    args: Record<QueryDatabaseRefreshesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DatabaseRefreshWhereInput | null, orderBy?: prisma.DatabaseRefreshOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DatabaseRefresh[]> | prisma.DatabaseRefresh[]
  }
  databaseRefreshesConnection: {
    type: 'DatabaseRefreshConnection'
    args: Record<QueryDatabaseRefreshesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DatabaseRefreshWhereInput | null, orderBy?: prisma.DatabaseRefreshOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DatabaseRefreshConnection> | prisma.DatabaseRefreshConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'year', args?: [] | false, alias?: string  } 
  | { name: 'plan', args?: [] | false, alias?: string  } 
  | { name: 'privilege', args?: [] | false, alias?: string  } 
  | { name: 'activities', args?: UserActivitiesArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'name'
  | 'email'
  | 'year'
  | 'plan'
  | 'privilege'
  | 'activities'


type UserActivitiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  year: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  plan: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  privilege: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  activities: {
    type: 'UserPresence'
    args: Record<UserActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: UserPresenceWhereInput | null, orderBy?: prisma.UserPresenceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPresence[]> | prisma.UserPresence[]
  }
}
  

// Types for UserPresence

type UserPresenceObject =
  | UserPresenceFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'activity', args?: [] | false, alias?: string  } 
  | { name: 'presence', args?: [] | false, alias?: string  } 
  | { name: 'xp', args?: [] | false, alias?: string  } 

type UserPresenceFields =
  | 'id'
  | 'code'
  | 'user'
  | 'activity'
  | 'presence'
  | 'xp'



  

export interface UserPresenceFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPresence">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  activity: {
    type: 'Activity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPresence">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity> | prisma.Activity
  }
  presence: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  xp: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Activity

type ActivityObject =
  | ActivityFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'xp', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'begin', args?: [] | false, alias?: string  } 
  | { name: 'end', args?: [] | false, alias?: string  } 
  | { name: 'registered', args?: ActivityRegisteredArgs[] | false, alias?: string  } 

type ActivityFields =
  | 'id'
  | 'code'
  | 'type'
  | 'xp'
  | 'title'
  | 'description'
  | 'begin'
  | 'end'
  | 'registered'


type ActivityRegisteredArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ActivityFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  xp: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  begin: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  end: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  registered: {
    type: 'UserPresence'
    args: Record<ActivityRegisteredArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Activity">,
      args: { where?: UserPresenceWhereInput | null, orderBy?: prisma.UserPresenceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPresence[]> | prisma.UserPresence[]
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ActivityConnection

type ActivityConnectionObject =
  | ActivityConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ActivityConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ActivityConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ActivityEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActivityEdge[]> | prisma.ActivityEdge[]
  }
  aggregate: {
    type: 'AggregateActivity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateActivity> | prisma.AggregateActivity
  }
}
  

// Types for ActivityEdge

type ActivityEdgeObject =
  | ActivityEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ActivityEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ActivityEdgeFieldDetails {
  node: {
    type: 'Activity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActivityEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity> | prisma.Activity
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateActivity

type AggregateActivityObject =
  | AggregateActivityFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateActivityFields =
  | 'count'



  

export interface AggregateActivityFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserPresenceConnection

type UserPresenceConnectionObject =
  | UserPresenceConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserPresenceConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserPresenceConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPresenceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserPresenceEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserPresenceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPresenceEdge[]> | prisma.UserPresenceEdge[]
  }
  aggregate: {
    type: 'AggregateUserPresence'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPresenceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUserPresence> | prisma.AggregateUserPresence
  }
}
  

// Types for UserPresenceEdge

type UserPresenceEdgeObject =
  | UserPresenceEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserPresenceEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserPresenceEdgeFieldDetails {
  node: {
    type: 'UserPresence'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPresenceEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPresence> | prisma.UserPresence
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUserPresence

type AggregateUserPresenceObject =
  | AggregateUserPresenceFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserPresenceFields =
  | 'count'



  

export interface AggregateUserPresenceFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ExperienceProject

type ExperienceProjectObject =
  | ExperienceProjectFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'competencies', args?: [] | false, alias?: string  } 
  | { name: 'informations', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'messages', args?: ExperienceProjectMessagesArgs[] | false, alias?: string  } 

type ExperienceProjectFields =
  | 'id'
  | 'title'
  | 'user'
  | 'description'
  | 'competencies'
  | 'informations'
  | 'status'
  | 'messages'


type ExperienceProjectMessagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ExperienceProjectFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  competencies: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  informations: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  messages: {
    type: 'ProjectMessages'
    args: Record<ExperienceProjectMessagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ExperienceProject">,
      args: { where?: ProjectMessagesWhereInput | null, orderBy?: prisma.ProjectMessagesOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectMessages[]> | prisma.ProjectMessages[]
  }
}
  

// Types for ProjectMessages

type ProjectMessagesObject =
  | ProjectMessagesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'message', args?: [] | false, alias?: string  } 

type ProjectMessagesFields =
  | 'id'
  | 'author'
  | 'date'
  | 'message'



  

export interface ProjectMessagesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  author: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  message: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ExperienceProjectConnection

type ExperienceProjectConnectionObject =
  | ExperienceProjectConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ExperienceProjectConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ExperienceProjectConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ExperienceProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ExperienceProjectEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ExperienceProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExperienceProjectEdge[]> | prisma.ExperienceProjectEdge[]
  }
  aggregate: {
    type: 'AggregateExperienceProject'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ExperienceProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateExperienceProject> | prisma.AggregateExperienceProject
  }
}
  

// Types for ExperienceProjectEdge

type ExperienceProjectEdgeObject =
  | ExperienceProjectEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ExperienceProjectEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ExperienceProjectEdgeFieldDetails {
  node: {
    type: 'ExperienceProject'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ExperienceProjectEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExperienceProject> | prisma.ExperienceProject
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateExperienceProject

type AggregateExperienceProjectObject =
  | AggregateExperienceProjectFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateExperienceProjectFields =
  | 'count'



  

export interface AggregateExperienceProjectFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Maker

type MakerObject =
  | MakerFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'co_workers', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'functionalities', args?: [] | false, alias?: string  } 
  | { name: 'technologies', args?: [] | false, alias?: string  } 
  | { name: 'delivery', args?: [] | false, alias?: string  } 
  | { name: 'organisation', args?: [] | false, alias?: string  } 
  | { name: 'resources', args?: [] | false, alias?: string  } 
  | { name: 'informations', args?: [] | false, alias?: string  } 
  | { name: 'xp', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'messages', args?: MakerMessagesArgs[] | false, alias?: string  } 

type MakerFields =
  | 'id'
  | 'title'
  | 'co_workers'
  | 'description'
  | 'functionalities'
  | 'technologies'
  | 'delivery'
  | 'organisation'
  | 'resources'
  | 'informations'
  | 'xp'
  | 'status'
  | 'messages'


type MakerMessagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface MakerFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  co_workers: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  functionalities: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  technologies: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  delivery: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  organisation: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  resources: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  informations: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  xp: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  messages: {
    type: 'ProjectMessages'
    args: Record<MakerMessagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Maker">,
      args: { where?: ProjectMessagesWhereInput | null, orderBy?: prisma.ProjectMessagesOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectMessages[]> | prisma.ProjectMessages[]
  }
}
  

// Types for MakerConnection

type MakerConnectionObject =
  | MakerConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MakerConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MakerConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MakerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MakerEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MakerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MakerEdge[]> | prisma.MakerEdge[]
  }
  aggregate: {
    type: 'AggregateMaker'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MakerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMaker> | prisma.AggregateMaker
  }
}
  

// Types for MakerEdge

type MakerEdgeObject =
  | MakerEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MakerEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MakerEdgeFieldDetails {
  node: {
    type: 'Maker'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MakerEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Maker> | prisma.Maker
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMaker

type AggregateMakerObject =
  | AggregateMakerFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMakerFields =
  | 'count'



  

export interface AggregateMakerFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Sharing

type SharingObject =
  | SharingFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'co_workers', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'xp', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'messages', args?: SharingMessagesArgs[] | false, alias?: string  } 

type SharingFields =
  | 'id'
  | 'title'
  | 'co_workers'
  | 'description'
  | 'date'
  | 'xp'
  | 'status'
  | 'messages'


type SharingMessagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface SharingFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  co_workers: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  xp: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  messages: {
    type: 'ProjectMessages'
    args: Record<SharingMessagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Sharing">,
      args: { where?: ProjectMessagesWhereInput | null, orderBy?: prisma.ProjectMessagesOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectMessages[]> | prisma.ProjectMessages[]
  }
}
  

// Types for SharingConnection

type SharingConnectionObject =
  | SharingConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SharingConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SharingConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SharingConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SharingEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SharingConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SharingEdge[]> | prisma.SharingEdge[]
  }
  aggregate: {
    type: 'AggregateSharing'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SharingConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSharing> | prisma.AggregateSharing
  }
}
  

// Types for SharingEdge

type SharingEdgeObject =
  | SharingEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SharingEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SharingEdgeFieldDetails {
  node: {
    type: 'Sharing'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SharingEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Sharing> | prisma.Sharing
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSharing

type AggregateSharingObject =
  | AggregateSharingFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSharingFields =
  | 'count'



  

export interface AggregateSharingFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectMessagesConnection

type ProjectMessagesConnectionObject =
  | ProjectMessagesConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectMessagesConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectMessagesConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectMessagesConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectMessagesEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectMessagesConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectMessagesEdge[]> | prisma.ProjectMessagesEdge[]
  }
  aggregate: {
    type: 'AggregateProjectMessages'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectMessagesConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProjectMessages> | prisma.AggregateProjectMessages
  }
}
  

// Types for ProjectMessagesEdge

type ProjectMessagesEdgeObject =
  | ProjectMessagesEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectMessagesEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectMessagesEdgeFieldDetails {
  node: {
    type: 'ProjectMessages'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectMessagesEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectMessages> | prisma.ProjectMessages
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProjectMessages

type AggregateProjectMessagesObject =
  | AggregateProjectMessagesFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectMessagesFields =
  | 'count'



  

export interface AggregateProjectMessagesFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DatabaseRefresh

type DatabaseRefreshObject =
  | DatabaseRefreshFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 

type DatabaseRefreshFields =
  | 'id'
  | 'date'



  

export interface DatabaseRefreshFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DatabaseRefreshConnection

type DatabaseRefreshConnectionObject =
  | DatabaseRefreshConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type DatabaseRefreshConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface DatabaseRefreshConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DatabaseRefreshConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'DatabaseRefreshEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"DatabaseRefreshConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DatabaseRefreshEdge[]> | prisma.DatabaseRefreshEdge[]
  }
  aggregate: {
    type: 'AggregateDatabaseRefresh'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DatabaseRefreshConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateDatabaseRefresh> | prisma.AggregateDatabaseRefresh
  }
}
  

// Types for DatabaseRefreshEdge

type DatabaseRefreshEdgeObject =
  | DatabaseRefreshEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type DatabaseRefreshEdgeFields =
  | 'node'
  | 'cursor'



  

export interface DatabaseRefreshEdgeFieldDetails {
  node: {
    type: 'DatabaseRefresh'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DatabaseRefreshEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DatabaseRefresh> | prisma.DatabaseRefresh
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateDatabaseRefresh

type AggregateDatabaseRefreshObject =
  | AggregateDatabaseRefreshFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateDatabaseRefreshFields =
  | 'count'



  

export interface AggregateDatabaseRefreshFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createActivity', args?: MutationCreateActivityArgs[] | false, alias?: string  } 
  | { name: 'updateActivity', args?: MutationUpdateActivityArgs[] | false, alias?: string  } 
  | { name: 'updateManyActivities', args?: MutationUpdateManyActivitiesArgs[] | false, alias?: string  } 
  | { name: 'upsertActivity', args?: MutationUpsertActivityArgs[] | false, alias?: string  } 
  | { name: 'deleteActivity', args?: MutationDeleteActivityArgs[] | false, alias?: string  } 
  | { name: 'deleteManyActivities', args?: MutationDeleteManyActivitiesArgs[] | false, alias?: string  } 
  | { name: 'createUserPresence', args?: MutationCreateUserPresenceArgs[] | false, alias?: string  } 
  | { name: 'updateUserPresence', args?: MutationUpdateUserPresenceArgs[] | false, alias?: string  } 
  | { name: 'updateManyUserPresences', args?: MutationUpdateManyUserPresencesArgs[] | false, alias?: string  } 
  | { name: 'upsertUserPresence', args?: MutationUpsertUserPresenceArgs[] | false, alias?: string  } 
  | { name: 'deleteUserPresence', args?: MutationDeleteUserPresenceArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUserPresences', args?: MutationDeleteManyUserPresencesArgs[] | false, alias?: string  } 
  | { name: 'createExperienceProject', args?: MutationCreateExperienceProjectArgs[] | false, alias?: string  } 
  | { name: 'updateExperienceProject', args?: MutationUpdateExperienceProjectArgs[] | false, alias?: string  } 
  | { name: 'updateManyExperienceProjects', args?: MutationUpdateManyExperienceProjectsArgs[] | false, alias?: string  } 
  | { name: 'upsertExperienceProject', args?: MutationUpsertExperienceProjectArgs[] | false, alias?: string  } 
  | { name: 'deleteExperienceProject', args?: MutationDeleteExperienceProjectArgs[] | false, alias?: string  } 
  | { name: 'deleteManyExperienceProjects', args?: MutationDeleteManyExperienceProjectsArgs[] | false, alias?: string  } 
  | { name: 'createMaker', args?: MutationCreateMakerArgs[] | false, alias?: string  } 
  | { name: 'updateMaker', args?: MutationUpdateMakerArgs[] | false, alias?: string  } 
  | { name: 'updateManyMakers', args?: MutationUpdateManyMakersArgs[] | false, alias?: string  } 
  | { name: 'upsertMaker', args?: MutationUpsertMakerArgs[] | false, alias?: string  } 
  | { name: 'deleteMaker', args?: MutationDeleteMakerArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMakers', args?: MutationDeleteManyMakersArgs[] | false, alias?: string  } 
  | { name: 'createSharing', args?: MutationCreateSharingArgs[] | false, alias?: string  } 
  | { name: 'updateSharing', args?: MutationUpdateSharingArgs[] | false, alias?: string  } 
  | { name: 'updateManySharings', args?: MutationUpdateManySharingsArgs[] | false, alias?: string  } 
  | { name: 'upsertSharing', args?: MutationUpsertSharingArgs[] | false, alias?: string  } 
  | { name: 'deleteSharing', args?: MutationDeleteSharingArgs[] | false, alias?: string  } 
  | { name: 'deleteManySharings', args?: MutationDeleteManySharingsArgs[] | false, alias?: string  } 
  | { name: 'createProjectMessages', args?: MutationCreateProjectMessagesArgs[] | false, alias?: string  } 
  | { name: 'updateProjectMessages', args?: MutationUpdateProjectMessagesArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjectMessageses', args?: MutationUpdateManyProjectMessagesesArgs[] | false, alias?: string  } 
  | { name: 'upsertProjectMessages', args?: MutationUpsertProjectMessagesArgs[] | false, alias?: string  } 
  | { name: 'deleteProjectMessages', args?: MutationDeleteProjectMessagesArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjectMessageses', args?: MutationDeleteManyProjectMessagesesArgs[] | false, alias?: string  } 
  | { name: 'createDatabaseRefresh', args?: MutationCreateDatabaseRefreshArgs[] | false, alias?: string  } 
  | { name: 'updateDatabaseRefresh', args?: MutationUpdateDatabaseRefreshArgs[] | false, alias?: string  } 
  | { name: 'updateManyDatabaseRefreshes', args?: MutationUpdateManyDatabaseRefreshesArgs[] | false, alias?: string  } 
  | { name: 'upsertDatabaseRefresh', args?: MutationUpsertDatabaseRefreshArgs[] | false, alias?: string  } 
  | { name: 'deleteDatabaseRefresh', args?: MutationDeleteDatabaseRefreshArgs[] | false, alias?: string  } 
  | { name: 'deleteManyDatabaseRefreshes', args?: MutationDeleteManyDatabaseRefreshesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createActivity'
  | 'updateActivity'
  | 'updateManyActivities'
  | 'upsertActivity'
  | 'deleteActivity'
  | 'deleteManyActivities'
  | 'createUserPresence'
  | 'updateUserPresence'
  | 'updateManyUserPresences'
  | 'upsertUserPresence'
  | 'deleteUserPresence'
  | 'deleteManyUserPresences'
  | 'createExperienceProject'
  | 'updateExperienceProject'
  | 'updateManyExperienceProjects'
  | 'upsertExperienceProject'
  | 'deleteExperienceProject'
  | 'deleteManyExperienceProjects'
  | 'createMaker'
  | 'updateMaker'
  | 'updateManyMakers'
  | 'upsertMaker'
  | 'deleteMaker'
  | 'deleteManyMakers'
  | 'createSharing'
  | 'updateSharing'
  | 'updateManySharings'
  | 'upsertSharing'
  | 'deleteSharing'
  | 'deleteManySharings'
  | 'createProjectMessages'
  | 'updateProjectMessages'
  | 'updateManyProjectMessageses'
  | 'upsertProjectMessages'
  | 'deleteProjectMessages'
  | 'deleteManyProjectMessageses'
  | 'createDatabaseRefresh'
  | 'updateDatabaseRefresh'
  | 'updateManyDatabaseRefreshes'
  | 'upsertDatabaseRefresh'
  | 'deleteDatabaseRefresh'
  | 'deleteManyDatabaseRefreshes'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateActivityArgs =
  | 'data'
type MutationUpdateActivityArgs =
  | 'data'
  | 'where'
type MutationUpdateManyActivitiesArgs =
  | 'data'
  | 'where'
type MutationUpsertActivityArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteActivityArgs =
  | 'where'
type MutationDeleteManyActivitiesArgs =
  | 'where'
type MutationCreateUserPresenceArgs =
  | 'data'
type MutationUpdateUserPresenceArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUserPresencesArgs =
  | 'data'
  | 'where'
type MutationUpsertUserPresenceArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserPresenceArgs =
  | 'where'
type MutationDeleteManyUserPresencesArgs =
  | 'where'
type MutationCreateExperienceProjectArgs =
  | 'data'
type MutationUpdateExperienceProjectArgs =
  | 'data'
  | 'where'
type MutationUpdateManyExperienceProjectsArgs =
  | 'data'
  | 'where'
type MutationUpsertExperienceProjectArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteExperienceProjectArgs =
  | 'where'
type MutationDeleteManyExperienceProjectsArgs =
  | 'where'
type MutationCreateMakerArgs =
  | 'data'
type MutationUpdateMakerArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMakersArgs =
  | 'data'
  | 'where'
type MutationUpsertMakerArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMakerArgs =
  | 'where'
type MutationDeleteManyMakersArgs =
  | 'where'
type MutationCreateSharingArgs =
  | 'data'
type MutationUpdateSharingArgs =
  | 'data'
  | 'where'
type MutationUpdateManySharingsArgs =
  | 'data'
  | 'where'
type MutationUpsertSharingArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSharingArgs =
  | 'where'
type MutationDeleteManySharingsArgs =
  | 'where'
type MutationCreateProjectMessagesArgs =
  | 'data'
type MutationUpdateProjectMessagesArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectMessagesesArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectMessagesArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectMessagesArgs =
  | 'where'
type MutationDeleteManyProjectMessagesesArgs =
  | 'where'
type MutationCreateDatabaseRefreshArgs =
  | 'data'
type MutationUpdateDatabaseRefreshArgs =
  | 'data'
  | 'where'
type MutationUpdateManyDatabaseRefreshesArgs =
  | 'data'
  | 'where'
type MutationUpsertDatabaseRefreshArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteDatabaseRefreshArgs =
  | 'where'
type MutationDeleteManyDatabaseRefreshesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createActivity: {
    type: 'Activity'
    args: Record<MutationCreateActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ActivityCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity> | prisma.Activity
  }
  updateActivity: {
    type: 'Activity'
    args: Record<MutationUpdateActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ActivityUpdateInput, where: ActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity | null> | prisma.Activity | null
  }
  updateManyActivities: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ActivityUpdateManyMutationInput, where?: ActivityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertActivity: {
    type: 'Activity'
    args: Record<MutationUpsertActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ActivityWhereUniqueInput, create: ActivityCreateInput, update: ActivityUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity> | prisma.Activity
  }
  deleteActivity: {
    type: 'Activity'
    args: Record<MutationDeleteActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity | null> | prisma.Activity | null
  }
  deleteManyActivities: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ActivityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUserPresence: {
    type: 'UserPresence'
    args: Record<MutationCreateUserPresenceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserPresenceCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPresence> | prisma.UserPresence
  }
  updateUserPresence: {
    type: 'UserPresence'
    args: Record<MutationUpdateUserPresenceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserPresenceUpdateInput, where: UserPresenceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPresence | null> | prisma.UserPresence | null
  }
  updateManyUserPresences: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUserPresencesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserPresenceUpdateManyMutationInput, where?: UserPresenceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUserPresence: {
    type: 'UserPresence'
    args: Record<MutationUpsertUserPresenceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserPresenceWhereUniqueInput, create: UserPresenceCreateInput, update: UserPresenceUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPresence> | prisma.UserPresence
  }
  deleteUserPresence: {
    type: 'UserPresence'
    args: Record<MutationDeleteUserPresenceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserPresenceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPresence | null> | prisma.UserPresence | null
  }
  deleteManyUserPresences: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUserPresencesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserPresenceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createExperienceProject: {
    type: 'ExperienceProject'
    args: Record<MutationCreateExperienceProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ExperienceProjectCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExperienceProject> | prisma.ExperienceProject
  }
  updateExperienceProject: {
    type: 'ExperienceProject'
    args: Record<MutationUpdateExperienceProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ExperienceProjectUpdateInput, where: ExperienceProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExperienceProject | null> | prisma.ExperienceProject | null
  }
  updateManyExperienceProjects: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyExperienceProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ExperienceProjectUpdateManyMutationInput, where?: ExperienceProjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertExperienceProject: {
    type: 'ExperienceProject'
    args: Record<MutationUpsertExperienceProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ExperienceProjectWhereUniqueInput, create: ExperienceProjectCreateInput, update: ExperienceProjectUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExperienceProject> | prisma.ExperienceProject
  }
  deleteExperienceProject: {
    type: 'ExperienceProject'
    args: Record<MutationDeleteExperienceProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ExperienceProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExperienceProject | null> | prisma.ExperienceProject | null
  }
  deleteManyExperienceProjects: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyExperienceProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ExperienceProjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMaker: {
    type: 'Maker'
    args: Record<MutationCreateMakerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MakerCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Maker> | prisma.Maker
  }
  updateMaker: {
    type: 'Maker'
    args: Record<MutationUpdateMakerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MakerUpdateInput, where: MakerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Maker | null> | prisma.Maker | null
  }
  updateManyMakers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMakersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MakerUpdateManyMutationInput, where?: MakerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMaker: {
    type: 'Maker'
    args: Record<MutationUpsertMakerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MakerWhereUniqueInput, create: MakerCreateInput, update: MakerUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Maker> | prisma.Maker
  }
  deleteMaker: {
    type: 'Maker'
    args: Record<MutationDeleteMakerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MakerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Maker | null> | prisma.Maker | null
  }
  deleteManyMakers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMakersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MakerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSharing: {
    type: 'Sharing'
    args: Record<MutationCreateSharingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SharingCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Sharing> | prisma.Sharing
  }
  updateSharing: {
    type: 'Sharing'
    args: Record<MutationUpdateSharingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SharingUpdateInput, where: SharingWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Sharing | null> | prisma.Sharing | null
  }
  updateManySharings: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySharingsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SharingUpdateManyMutationInput, where?: SharingWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSharing: {
    type: 'Sharing'
    args: Record<MutationUpsertSharingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SharingWhereUniqueInput, create: SharingCreateInput, update: SharingUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Sharing> | prisma.Sharing
  }
  deleteSharing: {
    type: 'Sharing'
    args: Record<MutationDeleteSharingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SharingWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Sharing | null> | prisma.Sharing | null
  }
  deleteManySharings: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySharingsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SharingWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProjectMessages: {
    type: 'ProjectMessages'
    args: Record<MutationCreateProjectMessagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectMessagesCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectMessages> | prisma.ProjectMessages
  }
  updateProjectMessages: {
    type: 'ProjectMessages'
    args: Record<MutationUpdateProjectMessagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectMessagesUpdateInput, where: ProjectMessagesWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectMessages | null> | prisma.ProjectMessages | null
  }
  updateManyProjectMessageses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectMessagesesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectMessagesUpdateManyMutationInput, where?: ProjectMessagesWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProjectMessages: {
    type: 'ProjectMessages'
    args: Record<MutationUpsertProjectMessagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectMessagesWhereUniqueInput, create: ProjectMessagesCreateInput, update: ProjectMessagesUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectMessages> | prisma.ProjectMessages
  }
  deleteProjectMessages: {
    type: 'ProjectMessages'
    args: Record<MutationDeleteProjectMessagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectMessagesWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectMessages | null> | prisma.ProjectMessages | null
  }
  deleteManyProjectMessageses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectMessagesesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectMessagesWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createDatabaseRefresh: {
    type: 'DatabaseRefresh'
    args: Record<MutationCreateDatabaseRefreshArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DatabaseRefreshCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DatabaseRefresh> | prisma.DatabaseRefresh
  }
  updateDatabaseRefresh: {
    type: 'DatabaseRefresh'
    args: Record<MutationUpdateDatabaseRefreshArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DatabaseRefreshUpdateInput, where: DatabaseRefreshWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DatabaseRefresh | null> | prisma.DatabaseRefresh | null
  }
  updateManyDatabaseRefreshes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyDatabaseRefreshesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DatabaseRefreshUpdateManyMutationInput, where?: DatabaseRefreshWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertDatabaseRefresh: {
    type: 'DatabaseRefresh'
    args: Record<MutationUpsertDatabaseRefreshArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DatabaseRefreshWhereUniqueInput, create: DatabaseRefreshCreateInput, update: DatabaseRefreshUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DatabaseRefresh> | prisma.DatabaseRefresh
  }
  deleteDatabaseRefresh: {
    type: 'DatabaseRefresh'
    args: Record<MutationDeleteDatabaseRefreshArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DatabaseRefreshWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DatabaseRefresh | null> | prisma.DatabaseRefresh | null
  }
  deleteManyDatabaseRefreshes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyDatabaseRefreshesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: DatabaseRefreshWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'activity', args?: SubscriptionActivityArgs[] | false, alias?: string  } 
  | { name: 'userPresence', args?: SubscriptionUserPresenceArgs[] | false, alias?: string  } 
  | { name: 'experienceProject', args?: SubscriptionExperienceProjectArgs[] | false, alias?: string  } 
  | { name: 'maker', args?: SubscriptionMakerArgs[] | false, alias?: string  } 
  | { name: 'sharing', args?: SubscriptionSharingArgs[] | false, alias?: string  } 
  | { name: 'projectMessages', args?: SubscriptionProjectMessagesArgs[] | false, alias?: string  } 
  | { name: 'databaseRefresh', args?: SubscriptionDatabaseRefreshArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'activity'
  | 'userPresence'
  | 'experienceProject'
  | 'maker'
  | 'sharing'
  | 'projectMessages'
  | 'databaseRefresh'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionActivityArgs =
  | 'where'
type SubscriptionUserPresenceArgs =
  | 'where'
type SubscriptionExperienceProjectArgs =
  | 'where'
type SubscriptionMakerArgs =
  | 'where'
type SubscriptionSharingArgs =
  | 'where'
type SubscriptionProjectMessagesArgs =
  | 'where'
type SubscriptionDatabaseRefreshArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  activity: {
    type: 'ActivitySubscriptionPayload'
    args: Record<SubscriptionActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ActivitySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActivitySubscriptionPayload | null> | prisma.ActivitySubscriptionPayload | null
  }
  userPresence: {
    type: 'UserPresenceSubscriptionPayload'
    args: Record<SubscriptionUserPresenceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserPresenceSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPresenceSubscriptionPayload | null> | prisma.UserPresenceSubscriptionPayload | null
  }
  experienceProject: {
    type: 'ExperienceProjectSubscriptionPayload'
    args: Record<SubscriptionExperienceProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ExperienceProjectSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExperienceProjectSubscriptionPayload | null> | prisma.ExperienceProjectSubscriptionPayload | null
  }
  maker: {
    type: 'MakerSubscriptionPayload'
    args: Record<SubscriptionMakerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MakerSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MakerSubscriptionPayload | null> | prisma.MakerSubscriptionPayload | null
  }
  sharing: {
    type: 'SharingSubscriptionPayload'
    args: Record<SubscriptionSharingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SharingSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SharingSubscriptionPayload | null> | prisma.SharingSubscriptionPayload | null
  }
  projectMessages: {
    type: 'ProjectMessagesSubscriptionPayload'
    args: Record<SubscriptionProjectMessagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectMessagesSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectMessagesSubscriptionPayload | null> | prisma.ProjectMessagesSubscriptionPayload | null
  }
  databaseRefresh: {
    type: 'DatabaseRefreshSubscriptionPayload'
    args: Record<SubscriptionDatabaseRefreshArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: DatabaseRefreshSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DatabaseRefreshSubscriptionPayload | null> | prisma.DatabaseRefreshSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'year', args?: [] | false, alias?: string  } 
  | { name: 'plan', args?: [] | false, alias?: string  } 
  | { name: 'privilege', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'name'
  | 'email'
  | 'year'
  | 'plan'
  | 'privilege'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  year: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  plan: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  privilege: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ActivitySubscriptionPayload

type ActivitySubscriptionPayloadObject =
  | ActivitySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ActivitySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ActivitySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Activity'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity | null> | prisma.Activity | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ActivityPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActivityPreviousValues | null> | prisma.ActivityPreviousValues | null
  }
}
  

// Types for ActivityPreviousValues

type ActivityPreviousValuesObject =
  | ActivityPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'xp', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'begin', args?: [] | false, alias?: string  } 
  | { name: 'end', args?: [] | false, alias?: string  } 

type ActivityPreviousValuesFields =
  | 'id'
  | 'code'
  | 'type'
  | 'xp'
  | 'title'
  | 'description'
  | 'begin'
  | 'end'



  

export interface ActivityPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  xp: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  begin: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  end: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserPresenceSubscriptionPayload

type UserPresenceSubscriptionPayloadObject =
  | UserPresenceSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserPresenceSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserPresenceSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPresenceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'UserPresence'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserPresenceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPresence | null> | prisma.UserPresence | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPresencePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserPresenceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPresencePreviousValues | null> | prisma.UserPresencePreviousValues | null
  }
}
  

// Types for UserPresencePreviousValues

type UserPresencePreviousValuesObject =
  | UserPresencePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'presence', args?: [] | false, alias?: string  } 
  | { name: 'xp', args?: [] | false, alias?: string  } 

type UserPresencePreviousValuesFields =
  | 'id'
  | 'code'
  | 'presence'
  | 'xp'



  

export interface UserPresencePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  presence: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  xp: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ExperienceProjectSubscriptionPayload

type ExperienceProjectSubscriptionPayloadObject =
  | ExperienceProjectSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ExperienceProjectSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ExperienceProjectSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ExperienceProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ExperienceProject'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ExperienceProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExperienceProject | null> | prisma.ExperienceProject | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ExperienceProjectPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ExperienceProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExperienceProjectPreviousValues | null> | prisma.ExperienceProjectPreviousValues | null
  }
}
  

// Types for ExperienceProjectPreviousValues

type ExperienceProjectPreviousValuesObject =
  | ExperienceProjectPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'competencies', args?: [] | false, alias?: string  } 
  | { name: 'informations', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 

type ExperienceProjectPreviousValuesFields =
  | 'id'
  | 'title'
  | 'user'
  | 'description'
  | 'competencies'
  | 'informations'
  | 'status'



  

export interface ExperienceProjectPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  competencies: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  informations: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MakerSubscriptionPayload

type MakerSubscriptionPayloadObject =
  | MakerSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MakerSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MakerSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MakerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Maker'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MakerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Maker | null> | prisma.Maker | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MakerPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MakerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MakerPreviousValues | null> | prisma.MakerPreviousValues | null
  }
}
  

// Types for MakerPreviousValues

type MakerPreviousValuesObject =
  | MakerPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'co_workers', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'functionalities', args?: [] | false, alias?: string  } 
  | { name: 'technologies', args?: [] | false, alias?: string  } 
  | { name: 'delivery', args?: [] | false, alias?: string  } 
  | { name: 'organisation', args?: [] | false, alias?: string  } 
  | { name: 'resources', args?: [] | false, alias?: string  } 
  | { name: 'informations', args?: [] | false, alias?: string  } 
  | { name: 'xp', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 

type MakerPreviousValuesFields =
  | 'id'
  | 'title'
  | 'co_workers'
  | 'description'
  | 'functionalities'
  | 'technologies'
  | 'delivery'
  | 'organisation'
  | 'resources'
  | 'informations'
  | 'xp'
  | 'status'



  

export interface MakerPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  co_workers: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  functionalities: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  technologies: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  delivery: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  organisation: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  resources: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  informations: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  xp: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SharingSubscriptionPayload

type SharingSubscriptionPayloadObject =
  | SharingSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SharingSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SharingSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SharingSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Sharing'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SharingSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Sharing | null> | prisma.Sharing | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SharingPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SharingSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SharingPreviousValues | null> | prisma.SharingPreviousValues | null
  }
}
  

// Types for SharingPreviousValues

type SharingPreviousValuesObject =
  | SharingPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'co_workers', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'xp', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 

type SharingPreviousValuesFields =
  | 'id'
  | 'title'
  | 'co_workers'
  | 'description'
  | 'date'
  | 'xp'
  | 'status'



  

export interface SharingPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  co_workers: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  xp: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectMessagesSubscriptionPayload

type ProjectMessagesSubscriptionPayloadObject =
  | ProjectMessagesSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectMessagesSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectMessagesSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectMessagesSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProjectMessages'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectMessagesSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectMessages | null> | prisma.ProjectMessages | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectMessagesPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectMessagesSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectMessagesPreviousValues | null> | prisma.ProjectMessagesPreviousValues | null
  }
}
  

// Types for ProjectMessagesPreviousValues

type ProjectMessagesPreviousValuesObject =
  | ProjectMessagesPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'message', args?: [] | false, alias?: string  } 

type ProjectMessagesPreviousValuesFields =
  | 'id'
  | 'author'
  | 'date'
  | 'message'



  

export interface ProjectMessagesPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  author: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  message: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DatabaseRefreshSubscriptionPayload

type DatabaseRefreshSubscriptionPayloadObject =
  | DatabaseRefreshSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type DatabaseRefreshSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface DatabaseRefreshSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DatabaseRefreshSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'DatabaseRefresh'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DatabaseRefreshSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DatabaseRefresh | null> | prisma.DatabaseRefresh | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'DatabaseRefreshPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DatabaseRefreshSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DatabaseRefreshPreviousValues | null> | prisma.DatabaseRefreshPreviousValues | null
  }
}
  

// Types for DatabaseRefreshPreviousValues

type DatabaseRefreshPreviousValuesObject =
  | DatabaseRefreshPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 

type DatabaseRefreshPreviousValuesFields =
  | 'id'
  | 'date'



  

export interface DatabaseRefreshPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface UserPresenceWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  code?: string | null
  code_not?: string | null
  code_in?: string[]
  code_not_in?: string[]
  code_lt?: string | null
  code_lte?: string | null
  code_gt?: string | null
  code_gte?: string | null
  code_contains?: string | null
  code_not_contains?: string | null
  code_starts_with?: string | null
  code_not_starts_with?: string | null
  code_ends_with?: string | null
  code_not_ends_with?: string | null
  user?: UserWhereInput | null
  activity?: ActivityWhereInput | null
  presence?: boolean | null
  presence_not?: boolean | null
  xp?: number | null
  xp_not?: number | null
  xp_in?: number[]
  xp_not_in?: number[]
  xp_lt?: number | null
  xp_lte?: number | null
  xp_gt?: number | null
  xp_gte?: number | null
  AND?: UserPresenceWhereInput[]
}
export type UserPresenceWhereInputInputObject =
  | Extract<keyof UserPresenceWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'code_not', alias?: string  } 
  | { name: 'code_in', alias?: string  } 
  | { name: 'code_not_in', alias?: string  } 
  | { name: 'code_lt', alias?: string  } 
  | { name: 'code_lte', alias?: string  } 
  | { name: 'code_gt', alias?: string  } 
  | { name: 'code_gte', alias?: string  } 
  | { name: 'code_contains', alias?: string  } 
  | { name: 'code_not_contains', alias?: string  } 
  | { name: 'code_starts_with', alias?: string  } 
  | { name: 'code_not_starts_with', alias?: string  } 
  | { name: 'code_ends_with', alias?: string  } 
  | { name: 'code_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'activity', alias?: string  } 
  | { name: 'presence', alias?: string  } 
  | { name: 'presence_not', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'xp_not', alias?: string  } 
  | { name: 'xp_in', alias?: string  } 
  | { name: 'xp_not_in', alias?: string  } 
  | { name: 'xp_lt', alias?: string  } 
  | { name: 'xp_lte', alias?: string  } 
  | { name: 'xp_gt', alias?: string  } 
  | { name: 'xp_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  year?: number | null
  year_not?: number | null
  year_in?: number[]
  year_not_in?: number[]
  year_lt?: number | null
  year_lte?: number | null
  year_gt?: number | null
  year_gte?: number | null
  plan?: number | null
  plan_not?: number | null
  plan_in?: number[]
  plan_not_in?: number[]
  plan_lt?: number | null
  plan_lte?: number | null
  plan_gt?: number | null
  plan_gte?: number | null
  privilege?: number | null
  privilege_not?: number | null
  privilege_in?: number[]
  privilege_not_in?: number[]
  privilege_lt?: number | null
  privilege_lte?: number | null
  privilege_gt?: number | null
  privilege_gte?: number | null
  activities_some?: UserPresenceWhereInput | null
  AND?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'year', alias?: string  } 
  | { name: 'year_not', alias?: string  } 
  | { name: 'year_in', alias?: string  } 
  | { name: 'year_not_in', alias?: string  } 
  | { name: 'year_lt', alias?: string  } 
  | { name: 'year_lte', alias?: string  } 
  | { name: 'year_gt', alias?: string  } 
  | { name: 'year_gte', alias?: string  } 
  | { name: 'plan', alias?: string  } 
  | { name: 'plan_not', alias?: string  } 
  | { name: 'plan_in', alias?: string  } 
  | { name: 'plan_not_in', alias?: string  } 
  | { name: 'plan_lt', alias?: string  } 
  | { name: 'plan_lte', alias?: string  } 
  | { name: 'plan_gt', alias?: string  } 
  | { name: 'plan_gte', alias?: string  } 
  | { name: 'privilege', alias?: string  } 
  | { name: 'privilege_not', alias?: string  } 
  | { name: 'privilege_in', alias?: string  } 
  | { name: 'privilege_not_in', alias?: string  } 
  | { name: 'privilege_lt', alias?: string  } 
  | { name: 'privilege_lte', alias?: string  } 
  | { name: 'privilege_gt', alias?: string  } 
  | { name: 'privilege_gte', alias?: string  } 
  | { name: 'activities_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ActivityWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  code?: string | null
  code_not?: string | null
  code_in?: string[]
  code_not_in?: string[]
  code_lt?: string | null
  code_lte?: string | null
  code_gt?: string | null
  code_gte?: string | null
  code_contains?: string | null
  code_not_contains?: string | null
  code_starts_with?: string | null
  code_not_starts_with?: string | null
  code_ends_with?: string | null
  code_not_ends_with?: string | null
  type?: string | null
  type_not?: string | null
  type_in?: string[]
  type_not_in?: string[]
  type_lt?: string | null
  type_lte?: string | null
  type_gt?: string | null
  type_gte?: string | null
  type_contains?: string | null
  type_not_contains?: string | null
  type_starts_with?: string | null
  type_not_starts_with?: string | null
  type_ends_with?: string | null
  type_not_ends_with?: string | null
  xp?: number | null
  xp_not?: number | null
  xp_in?: number[]
  xp_not_in?: number[]
  xp_lt?: number | null
  xp_lte?: number | null
  xp_gt?: number | null
  xp_gte?: number | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  begin?: string | null
  begin_not?: string | null
  begin_in?: string[]
  begin_not_in?: string[]
  begin_lt?: string | null
  begin_lte?: string | null
  begin_gt?: string | null
  begin_gte?: string | null
  end?: string | null
  end_not?: string | null
  end_in?: string[]
  end_not_in?: string[]
  end_lt?: string | null
  end_lte?: string | null
  end_gt?: string | null
  end_gte?: string | null
  registered_some?: UserPresenceWhereInput | null
  AND?: ActivityWhereInput[]
}
export type ActivityWhereInputInputObject =
  | Extract<keyof ActivityWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'code_not', alias?: string  } 
  | { name: 'code_in', alias?: string  } 
  | { name: 'code_not_in', alias?: string  } 
  | { name: 'code_lt', alias?: string  } 
  | { name: 'code_lte', alias?: string  } 
  | { name: 'code_gt', alias?: string  } 
  | { name: 'code_gte', alias?: string  } 
  | { name: 'code_contains', alias?: string  } 
  | { name: 'code_not_contains', alias?: string  } 
  | { name: 'code_starts_with', alias?: string  } 
  | { name: 'code_not_starts_with', alias?: string  } 
  | { name: 'code_ends_with', alias?: string  } 
  | { name: 'code_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'type_lt', alias?: string  } 
  | { name: 'type_lte', alias?: string  } 
  | { name: 'type_gt', alias?: string  } 
  | { name: 'type_gte', alias?: string  } 
  | { name: 'type_contains', alias?: string  } 
  | { name: 'type_not_contains', alias?: string  } 
  | { name: 'type_starts_with', alias?: string  } 
  | { name: 'type_not_starts_with', alias?: string  } 
  | { name: 'type_ends_with', alias?: string  } 
  | { name: 'type_not_ends_with', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'xp_not', alias?: string  } 
  | { name: 'xp_in', alias?: string  } 
  | { name: 'xp_not_in', alias?: string  } 
  | { name: 'xp_lt', alias?: string  } 
  | { name: 'xp_lte', alias?: string  } 
  | { name: 'xp_gt', alias?: string  } 
  | { name: 'xp_gte', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'begin', alias?: string  } 
  | { name: 'begin_not', alias?: string  } 
  | { name: 'begin_in', alias?: string  } 
  | { name: 'begin_not_in', alias?: string  } 
  | { name: 'begin_lt', alias?: string  } 
  | { name: 'begin_lte', alias?: string  } 
  | { name: 'begin_gt', alias?: string  } 
  | { name: 'begin_gte', alias?: string  } 
  | { name: 'end', alias?: string  } 
  | { name: 'end_not', alias?: string  } 
  | { name: 'end_in', alias?: string  } 
  | { name: 'end_not_in', alias?: string  } 
  | { name: 'end_lt', alias?: string  } 
  | { name: 'end_lte', alias?: string  } 
  | { name: 'end_gt', alias?: string  } 
  | { name: 'end_gte', alias?: string  } 
  | { name: 'registered_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ActivityWhereUniqueInput {
  id?: string | null
  code?: string | null
}
export type ActivityWhereUniqueInputInputObject =
  | Extract<keyof ActivityWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'code', alias?: string  } 
  
export interface UserPresenceWhereUniqueInput {
  id?: string | null
  code?: string | null
}
export type UserPresenceWhereUniqueInputInputObject =
  | Extract<keyof UserPresenceWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'code', alias?: string  } 
  
export interface ExperienceProjectWhereUniqueInput {
  id?: string | null
}
export type ExperienceProjectWhereUniqueInputInputObject =
  | Extract<keyof ExperienceProjectWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProjectMessagesWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  author?: string | null
  author_not?: string | null
  author_in?: string[]
  author_not_in?: string[]
  author_lt?: string | null
  author_lte?: string | null
  author_gt?: string | null
  author_gte?: string | null
  author_contains?: string | null
  author_not_contains?: string | null
  author_starts_with?: string | null
  author_not_starts_with?: string | null
  author_ends_with?: string | null
  author_not_ends_with?: string | null
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  message?: string | null
  message_not?: string | null
  message_in?: string[]
  message_not_in?: string[]
  message_lt?: string | null
  message_lte?: string | null
  message_gt?: string | null
  message_gte?: string | null
  message_contains?: string | null
  message_not_contains?: string | null
  message_starts_with?: string | null
  message_not_starts_with?: string | null
  message_ends_with?: string | null
  message_not_ends_with?: string | null
  AND?: ProjectMessagesWhereInput[]
}
export type ProjectMessagesWhereInputInputObject =
  | Extract<keyof ProjectMessagesWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'author_not', alias?: string  } 
  | { name: 'author_in', alias?: string  } 
  | { name: 'author_not_in', alias?: string  } 
  | { name: 'author_lt', alias?: string  } 
  | { name: 'author_lte', alias?: string  } 
  | { name: 'author_gt', alias?: string  } 
  | { name: 'author_gte', alias?: string  } 
  | { name: 'author_contains', alias?: string  } 
  | { name: 'author_not_contains', alias?: string  } 
  | { name: 'author_starts_with', alias?: string  } 
  | { name: 'author_not_starts_with', alias?: string  } 
  | { name: 'author_ends_with', alias?: string  } 
  | { name: 'author_not_ends_with', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'message_not', alias?: string  } 
  | { name: 'message_in', alias?: string  } 
  | { name: 'message_not_in', alias?: string  } 
  | { name: 'message_lt', alias?: string  } 
  | { name: 'message_lte', alias?: string  } 
  | { name: 'message_gt', alias?: string  } 
  | { name: 'message_gte', alias?: string  } 
  | { name: 'message_contains', alias?: string  } 
  | { name: 'message_not_contains', alias?: string  } 
  | { name: 'message_starts_with', alias?: string  } 
  | { name: 'message_not_starts_with', alias?: string  } 
  | { name: 'message_ends_with', alias?: string  } 
  | { name: 'message_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ExperienceProjectWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  user?: string | null
  user_not?: string | null
  user_in?: string[]
  user_not_in?: string[]
  user_lt?: string | null
  user_lte?: string | null
  user_gt?: string | null
  user_gte?: string | null
  user_contains?: string | null
  user_not_contains?: string | null
  user_starts_with?: string | null
  user_not_starts_with?: string | null
  user_ends_with?: string | null
  user_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  competencies?: string | null
  competencies_not?: string | null
  competencies_in?: string[]
  competencies_not_in?: string[]
  competencies_lt?: string | null
  competencies_lte?: string | null
  competencies_gt?: string | null
  competencies_gte?: string | null
  competencies_contains?: string | null
  competencies_not_contains?: string | null
  competencies_starts_with?: string | null
  competencies_not_starts_with?: string | null
  competencies_ends_with?: string | null
  competencies_not_ends_with?: string | null
  informations?: string | null
  informations_not?: string | null
  informations_in?: string[]
  informations_not_in?: string[]
  informations_lt?: string | null
  informations_lte?: string | null
  informations_gt?: string | null
  informations_gte?: string | null
  informations_contains?: string | null
  informations_not_contains?: string | null
  informations_starts_with?: string | null
  informations_not_starts_with?: string | null
  informations_ends_with?: string | null
  informations_not_ends_with?: string | null
  status?: number | null
  status_not?: number | null
  status_in?: number[]
  status_not_in?: number[]
  status_lt?: number | null
  status_lte?: number | null
  status_gt?: number | null
  status_gte?: number | null
  messages_some?: ProjectMessagesWhereInput | null
  AND?: ExperienceProjectWhereInput[]
}
export type ExperienceProjectWhereInputInputObject =
  | Extract<keyof ExperienceProjectWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'user_not', alias?: string  } 
  | { name: 'user_in', alias?: string  } 
  | { name: 'user_not_in', alias?: string  } 
  | { name: 'user_lt', alias?: string  } 
  | { name: 'user_lte', alias?: string  } 
  | { name: 'user_gt', alias?: string  } 
  | { name: 'user_gte', alias?: string  } 
  | { name: 'user_contains', alias?: string  } 
  | { name: 'user_not_contains', alias?: string  } 
  | { name: 'user_starts_with', alias?: string  } 
  | { name: 'user_not_starts_with', alias?: string  } 
  | { name: 'user_ends_with', alias?: string  } 
  | { name: 'user_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'competencies', alias?: string  } 
  | { name: 'competencies_not', alias?: string  } 
  | { name: 'competencies_in', alias?: string  } 
  | { name: 'competencies_not_in', alias?: string  } 
  | { name: 'competencies_lt', alias?: string  } 
  | { name: 'competencies_lte', alias?: string  } 
  | { name: 'competencies_gt', alias?: string  } 
  | { name: 'competencies_gte', alias?: string  } 
  | { name: 'competencies_contains', alias?: string  } 
  | { name: 'competencies_not_contains', alias?: string  } 
  | { name: 'competencies_starts_with', alias?: string  } 
  | { name: 'competencies_not_starts_with', alias?: string  } 
  | { name: 'competencies_ends_with', alias?: string  } 
  | { name: 'competencies_not_ends_with', alias?: string  } 
  | { name: 'informations', alias?: string  } 
  | { name: 'informations_not', alias?: string  } 
  | { name: 'informations_in', alias?: string  } 
  | { name: 'informations_not_in', alias?: string  } 
  | { name: 'informations_lt', alias?: string  } 
  | { name: 'informations_lte', alias?: string  } 
  | { name: 'informations_gt', alias?: string  } 
  | { name: 'informations_gte', alias?: string  } 
  | { name: 'informations_contains', alias?: string  } 
  | { name: 'informations_not_contains', alias?: string  } 
  | { name: 'informations_starts_with', alias?: string  } 
  | { name: 'informations_not_starts_with', alias?: string  } 
  | { name: 'informations_ends_with', alias?: string  } 
  | { name: 'informations_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'status_lt', alias?: string  } 
  | { name: 'status_lte', alias?: string  } 
  | { name: 'status_gt', alias?: string  } 
  | { name: 'status_gte', alias?: string  } 
  | { name: 'messages_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface MakerWhereUniqueInput {
  id?: string | null
}
export type MakerWhereUniqueInputInputObject =
  | Extract<keyof MakerWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface MakerWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  functionalities?: string | null
  functionalities_not?: string | null
  functionalities_in?: string[]
  functionalities_not_in?: string[]
  functionalities_lt?: string | null
  functionalities_lte?: string | null
  functionalities_gt?: string | null
  functionalities_gte?: string | null
  functionalities_contains?: string | null
  functionalities_not_contains?: string | null
  functionalities_starts_with?: string | null
  functionalities_not_starts_with?: string | null
  functionalities_ends_with?: string | null
  functionalities_not_ends_with?: string | null
  technologies?: string | null
  technologies_not?: string | null
  technologies_in?: string[]
  technologies_not_in?: string[]
  technologies_lt?: string | null
  technologies_lte?: string | null
  technologies_gt?: string | null
  technologies_gte?: string | null
  technologies_contains?: string | null
  technologies_not_contains?: string | null
  technologies_starts_with?: string | null
  technologies_not_starts_with?: string | null
  technologies_ends_with?: string | null
  technologies_not_ends_with?: string | null
  delivery?: string | null
  delivery_not?: string | null
  delivery_in?: string[]
  delivery_not_in?: string[]
  delivery_lt?: string | null
  delivery_lte?: string | null
  delivery_gt?: string | null
  delivery_gte?: string | null
  delivery_contains?: string | null
  delivery_not_contains?: string | null
  delivery_starts_with?: string | null
  delivery_not_starts_with?: string | null
  delivery_ends_with?: string | null
  delivery_not_ends_with?: string | null
  organisation?: string | null
  organisation_not?: string | null
  organisation_in?: string[]
  organisation_not_in?: string[]
  organisation_lt?: string | null
  organisation_lte?: string | null
  organisation_gt?: string | null
  organisation_gte?: string | null
  organisation_contains?: string | null
  organisation_not_contains?: string | null
  organisation_starts_with?: string | null
  organisation_not_starts_with?: string | null
  organisation_ends_with?: string | null
  organisation_not_ends_with?: string | null
  resources?: string | null
  resources_not?: string | null
  resources_in?: string[]
  resources_not_in?: string[]
  resources_lt?: string | null
  resources_lte?: string | null
  resources_gt?: string | null
  resources_gte?: string | null
  resources_contains?: string | null
  resources_not_contains?: string | null
  resources_starts_with?: string | null
  resources_not_starts_with?: string | null
  resources_ends_with?: string | null
  resources_not_ends_with?: string | null
  informations?: string | null
  informations_not?: string | null
  informations_in?: string[]
  informations_not_in?: string[]
  informations_lt?: string | null
  informations_lte?: string | null
  informations_gt?: string | null
  informations_gte?: string | null
  informations_contains?: string | null
  informations_not_contains?: string | null
  informations_starts_with?: string | null
  informations_not_starts_with?: string | null
  informations_ends_with?: string | null
  informations_not_ends_with?: string | null
  xp?: number | null
  xp_not?: number | null
  xp_in?: number[]
  xp_not_in?: number[]
  xp_lt?: number | null
  xp_lte?: number | null
  xp_gt?: number | null
  xp_gte?: number | null
  status?: number | null
  status_not?: number | null
  status_in?: number[]
  status_not_in?: number[]
  status_lt?: number | null
  status_lte?: number | null
  status_gt?: number | null
  status_gte?: number | null
  messages_some?: ProjectMessagesWhereInput | null
  AND?: MakerWhereInput[]
}
export type MakerWhereInputInputObject =
  | Extract<keyof MakerWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'functionalities', alias?: string  } 
  | { name: 'functionalities_not', alias?: string  } 
  | { name: 'functionalities_in', alias?: string  } 
  | { name: 'functionalities_not_in', alias?: string  } 
  | { name: 'functionalities_lt', alias?: string  } 
  | { name: 'functionalities_lte', alias?: string  } 
  | { name: 'functionalities_gt', alias?: string  } 
  | { name: 'functionalities_gte', alias?: string  } 
  | { name: 'functionalities_contains', alias?: string  } 
  | { name: 'functionalities_not_contains', alias?: string  } 
  | { name: 'functionalities_starts_with', alias?: string  } 
  | { name: 'functionalities_not_starts_with', alias?: string  } 
  | { name: 'functionalities_ends_with', alias?: string  } 
  | { name: 'functionalities_not_ends_with', alias?: string  } 
  | { name: 'technologies', alias?: string  } 
  | { name: 'technologies_not', alias?: string  } 
  | { name: 'technologies_in', alias?: string  } 
  | { name: 'technologies_not_in', alias?: string  } 
  | { name: 'technologies_lt', alias?: string  } 
  | { name: 'technologies_lte', alias?: string  } 
  | { name: 'technologies_gt', alias?: string  } 
  | { name: 'technologies_gte', alias?: string  } 
  | { name: 'technologies_contains', alias?: string  } 
  | { name: 'technologies_not_contains', alias?: string  } 
  | { name: 'technologies_starts_with', alias?: string  } 
  | { name: 'technologies_not_starts_with', alias?: string  } 
  | { name: 'technologies_ends_with', alias?: string  } 
  | { name: 'technologies_not_ends_with', alias?: string  } 
  | { name: 'delivery', alias?: string  } 
  | { name: 'delivery_not', alias?: string  } 
  | { name: 'delivery_in', alias?: string  } 
  | { name: 'delivery_not_in', alias?: string  } 
  | { name: 'delivery_lt', alias?: string  } 
  | { name: 'delivery_lte', alias?: string  } 
  | { name: 'delivery_gt', alias?: string  } 
  | { name: 'delivery_gte', alias?: string  } 
  | { name: 'delivery_contains', alias?: string  } 
  | { name: 'delivery_not_contains', alias?: string  } 
  | { name: 'delivery_starts_with', alias?: string  } 
  | { name: 'delivery_not_starts_with', alias?: string  } 
  | { name: 'delivery_ends_with', alias?: string  } 
  | { name: 'delivery_not_ends_with', alias?: string  } 
  | { name: 'organisation', alias?: string  } 
  | { name: 'organisation_not', alias?: string  } 
  | { name: 'organisation_in', alias?: string  } 
  | { name: 'organisation_not_in', alias?: string  } 
  | { name: 'organisation_lt', alias?: string  } 
  | { name: 'organisation_lte', alias?: string  } 
  | { name: 'organisation_gt', alias?: string  } 
  | { name: 'organisation_gte', alias?: string  } 
  | { name: 'organisation_contains', alias?: string  } 
  | { name: 'organisation_not_contains', alias?: string  } 
  | { name: 'organisation_starts_with', alias?: string  } 
  | { name: 'organisation_not_starts_with', alias?: string  } 
  | { name: 'organisation_ends_with', alias?: string  } 
  | { name: 'organisation_not_ends_with', alias?: string  } 
  | { name: 'resources', alias?: string  } 
  | { name: 'resources_not', alias?: string  } 
  | { name: 'resources_in', alias?: string  } 
  | { name: 'resources_not_in', alias?: string  } 
  | { name: 'resources_lt', alias?: string  } 
  | { name: 'resources_lte', alias?: string  } 
  | { name: 'resources_gt', alias?: string  } 
  | { name: 'resources_gte', alias?: string  } 
  | { name: 'resources_contains', alias?: string  } 
  | { name: 'resources_not_contains', alias?: string  } 
  | { name: 'resources_starts_with', alias?: string  } 
  | { name: 'resources_not_starts_with', alias?: string  } 
  | { name: 'resources_ends_with', alias?: string  } 
  | { name: 'resources_not_ends_with', alias?: string  } 
  | { name: 'informations', alias?: string  } 
  | { name: 'informations_not', alias?: string  } 
  | { name: 'informations_in', alias?: string  } 
  | { name: 'informations_not_in', alias?: string  } 
  | { name: 'informations_lt', alias?: string  } 
  | { name: 'informations_lte', alias?: string  } 
  | { name: 'informations_gt', alias?: string  } 
  | { name: 'informations_gte', alias?: string  } 
  | { name: 'informations_contains', alias?: string  } 
  | { name: 'informations_not_contains', alias?: string  } 
  | { name: 'informations_starts_with', alias?: string  } 
  | { name: 'informations_not_starts_with', alias?: string  } 
  | { name: 'informations_ends_with', alias?: string  } 
  | { name: 'informations_not_ends_with', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'xp_not', alias?: string  } 
  | { name: 'xp_in', alias?: string  } 
  | { name: 'xp_not_in', alias?: string  } 
  | { name: 'xp_lt', alias?: string  } 
  | { name: 'xp_lte', alias?: string  } 
  | { name: 'xp_gt', alias?: string  } 
  | { name: 'xp_gte', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'status_lt', alias?: string  } 
  | { name: 'status_lte', alias?: string  } 
  | { name: 'status_gt', alias?: string  } 
  | { name: 'status_gte', alias?: string  } 
  | { name: 'messages_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface SharingWhereUniqueInput {
  id?: string | null
  title?: string | null
}
export type SharingWhereUniqueInputInputObject =
  | Extract<keyof SharingWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface SharingWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  xp?: number | null
  xp_not?: number | null
  xp_in?: number[]
  xp_not_in?: number[]
  xp_lt?: number | null
  xp_lte?: number | null
  xp_gt?: number | null
  xp_gte?: number | null
  status?: number | null
  status_not?: number | null
  status_in?: number[]
  status_not_in?: number[]
  status_lt?: number | null
  status_lte?: number | null
  status_gt?: number | null
  status_gte?: number | null
  messages_some?: ProjectMessagesWhereInput | null
  AND?: SharingWhereInput[]
}
export type SharingWhereInputInputObject =
  | Extract<keyof SharingWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'xp_not', alias?: string  } 
  | { name: 'xp_in', alias?: string  } 
  | { name: 'xp_not_in', alias?: string  } 
  | { name: 'xp_lt', alias?: string  } 
  | { name: 'xp_lte', alias?: string  } 
  | { name: 'xp_gt', alias?: string  } 
  | { name: 'xp_gte', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'status_lt', alias?: string  } 
  | { name: 'status_lte', alias?: string  } 
  | { name: 'status_gt', alias?: string  } 
  | { name: 'status_gte', alias?: string  } 
  | { name: 'messages_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ProjectMessagesWhereUniqueInput {
  id?: string | null
}
export type ProjectMessagesWhereUniqueInputInputObject =
  | Extract<keyof ProjectMessagesWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface DatabaseRefreshWhereUniqueInput {
  id?: string | null
}
export type DatabaseRefreshWhereUniqueInputInputObject =
  | Extract<keyof DatabaseRefreshWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface DatabaseRefreshWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  AND?: DatabaseRefreshWhereInput[]
}
export type DatabaseRefreshWhereInputInputObject =
  | Extract<keyof DatabaseRefreshWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  name?: string
  email?: string
  year?: number | null
  plan?: number | null
  privilege?: number | null
  activities?: UserPresenceCreateManyWithoutUserInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'year', alias?: string  } 
  | { name: 'plan', alias?: string  } 
  | { name: 'privilege', alias?: string  } 
  | { name: 'activities', alias?: string  } 
  
export interface UserPresenceCreateManyWithoutUserInput {
  create?: UserPresenceCreateWithoutUserInput[]
  connect?: UserPresenceWhereUniqueInput[]
}
export type UserPresenceCreateManyWithoutUserInputInputObject =
  | Extract<keyof UserPresenceCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserPresenceCreateWithoutUserInput {
  id?: string | null
  code?: string
  activity?: ActivityCreateOneWithoutRegisteredInput
  presence?: boolean
  xp?: number
}
export type UserPresenceCreateWithoutUserInputInputObject =
  | Extract<keyof UserPresenceCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'activity', alias?: string  } 
  | { name: 'presence', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  
export interface ActivityCreateOneWithoutRegisteredInput {
  create?: ActivityCreateWithoutRegisteredInput | null
  connect?: ActivityWhereUniqueInput | null
}
export type ActivityCreateOneWithoutRegisteredInputInputObject =
  | Extract<keyof ActivityCreateOneWithoutRegisteredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ActivityCreateWithoutRegisteredInput {
  id?: string | null
  code?: string
  type?: string
  xp?: number | null
  title?: string
  description?: string
  begin?: string
  end?: string
}
export type ActivityCreateWithoutRegisteredInputInputObject =
  | Extract<keyof ActivityCreateWithoutRegisteredInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'begin', alias?: string  } 
  | { name: 'end', alias?: string  } 
  
export interface UserUpdateInput {
  name?: string | null
  email?: string | null
  year?: number | null
  plan?: number | null
  privilege?: number | null
  activities?: UserPresenceUpdateManyWithoutUserInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'year', alias?: string  } 
  | { name: 'plan', alias?: string  } 
  | { name: 'privilege', alias?: string  } 
  | { name: 'activities', alias?: string  } 
  
export interface UserPresenceUpdateManyWithoutUserInput {
  create?: UserPresenceCreateWithoutUserInput[]
  delete?: UserPresenceWhereUniqueInput[]
  connect?: UserPresenceWhereUniqueInput[]
  set?: UserPresenceWhereUniqueInput[]
  disconnect?: UserPresenceWhereUniqueInput[]
  update?: UserPresenceUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: UserPresenceUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: UserPresenceScalarWhereInput[]
  updateMany?: UserPresenceUpdateManyWithWhereNestedInput[]
}
export type UserPresenceUpdateManyWithoutUserInputInputObject =
  | Extract<keyof UserPresenceUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserPresenceUpdateWithWhereUniqueWithoutUserInput {
  where?: UserPresenceWhereUniqueInput
  data?: UserPresenceUpdateWithoutUserDataInput
}
export type UserPresenceUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof UserPresenceUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserPresenceUpdateWithoutUserDataInput {
  code?: string | null
  activity?: ActivityUpdateOneRequiredWithoutRegisteredInput | null
  presence?: boolean | null
  xp?: number | null
}
export type UserPresenceUpdateWithoutUserDataInputInputObject =
  | Extract<keyof UserPresenceUpdateWithoutUserDataInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'activity', alias?: string  } 
  | { name: 'presence', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  
export interface ActivityUpdateOneRequiredWithoutRegisteredInput {
  create?: ActivityCreateWithoutRegisteredInput | null
  update?: ActivityUpdateWithoutRegisteredDataInput | null
  upsert?: ActivityUpsertWithoutRegisteredInput | null
  connect?: ActivityWhereUniqueInput | null
}
export type ActivityUpdateOneRequiredWithoutRegisteredInputInputObject =
  | Extract<keyof ActivityUpdateOneRequiredWithoutRegisteredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ActivityUpdateWithoutRegisteredDataInput {
  code?: string | null
  type?: string | null
  xp?: number | null
  title?: string | null
  description?: string | null
  begin?: string | null
  end?: string | null
}
export type ActivityUpdateWithoutRegisteredDataInputInputObject =
  | Extract<keyof ActivityUpdateWithoutRegisteredDataInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'begin', alias?: string  } 
  | { name: 'end', alias?: string  } 
  
export interface ActivityUpsertWithoutRegisteredInput {
  update?: ActivityUpdateWithoutRegisteredDataInput
  create?: ActivityCreateWithoutRegisteredInput
}
export type ActivityUpsertWithoutRegisteredInputInputObject =
  | Extract<keyof ActivityUpsertWithoutRegisteredInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserPresenceUpsertWithWhereUniqueWithoutUserInput {
  where?: UserPresenceWhereUniqueInput
  update?: UserPresenceUpdateWithoutUserDataInput
  create?: UserPresenceCreateWithoutUserInput
}
export type UserPresenceUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof UserPresenceUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserPresenceScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  code?: string | null
  code_not?: string | null
  code_in?: string[]
  code_not_in?: string[]
  code_lt?: string | null
  code_lte?: string | null
  code_gt?: string | null
  code_gte?: string | null
  code_contains?: string | null
  code_not_contains?: string | null
  code_starts_with?: string | null
  code_not_starts_with?: string | null
  code_ends_with?: string | null
  code_not_ends_with?: string | null
  presence?: boolean | null
  presence_not?: boolean | null
  xp?: number | null
  xp_not?: number | null
  xp_in?: number[]
  xp_not_in?: number[]
  xp_lt?: number | null
  xp_lte?: number | null
  xp_gt?: number | null
  xp_gte?: number | null
  AND?: UserPresenceScalarWhereInput[]
  OR?: UserPresenceScalarWhereInput[]
  NOT?: UserPresenceScalarWhereInput[]
}
export type UserPresenceScalarWhereInputInputObject =
  | Extract<keyof UserPresenceScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'code_not', alias?: string  } 
  | { name: 'code_in', alias?: string  } 
  | { name: 'code_not_in', alias?: string  } 
  | { name: 'code_lt', alias?: string  } 
  | { name: 'code_lte', alias?: string  } 
  | { name: 'code_gt', alias?: string  } 
  | { name: 'code_gte', alias?: string  } 
  | { name: 'code_contains', alias?: string  } 
  | { name: 'code_not_contains', alias?: string  } 
  | { name: 'code_starts_with', alias?: string  } 
  | { name: 'code_not_starts_with', alias?: string  } 
  | { name: 'code_ends_with', alias?: string  } 
  | { name: 'code_not_ends_with', alias?: string  } 
  | { name: 'presence', alias?: string  } 
  | { name: 'presence_not', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'xp_not', alias?: string  } 
  | { name: 'xp_in', alias?: string  } 
  | { name: 'xp_not_in', alias?: string  } 
  | { name: 'xp_lt', alias?: string  } 
  | { name: 'xp_lte', alias?: string  } 
  | { name: 'xp_gt', alias?: string  } 
  | { name: 'xp_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserPresenceUpdateManyWithWhereNestedInput {
  where?: UserPresenceScalarWhereInput
  data?: UserPresenceUpdateManyDataInput
}
export type UserPresenceUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserPresenceUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserPresenceUpdateManyDataInput {
  code?: string | null
  presence?: boolean | null
  xp?: number | null
}
export type UserPresenceUpdateManyDataInputInputObject =
  | Extract<keyof UserPresenceUpdateManyDataInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'presence', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  name?: string | null
  email?: string | null
  year?: number | null
  plan?: number | null
  privilege?: number | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'year', alias?: string  } 
  | { name: 'plan', alias?: string  } 
  | { name: 'privilege', alias?: string  } 
  
export interface ActivityCreateInput {
  id?: string | null
  code?: string
  type?: string
  xp?: number | null
  title?: string
  description?: string
  begin?: string
  end?: string
  registered?: UserPresenceCreateManyWithoutActivityInput | null
}
export type ActivityCreateInputInputObject =
  | Extract<keyof ActivityCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'begin', alias?: string  } 
  | { name: 'end', alias?: string  } 
  | { name: 'registered', alias?: string  } 
  
export interface UserPresenceCreateManyWithoutActivityInput {
  create?: UserPresenceCreateWithoutActivityInput[]
  connect?: UserPresenceWhereUniqueInput[]
}
export type UserPresenceCreateManyWithoutActivityInputInputObject =
  | Extract<keyof UserPresenceCreateManyWithoutActivityInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserPresenceCreateWithoutActivityInput {
  id?: string | null
  code?: string
  user?: UserCreateOneWithoutActivitiesInput
  presence?: boolean
  xp?: number
}
export type UserPresenceCreateWithoutActivityInputInputObject =
  | Extract<keyof UserPresenceCreateWithoutActivityInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'presence', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  
export interface UserCreateOneWithoutActivitiesInput {
  create?: UserCreateWithoutActivitiesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutActivitiesInputInputObject =
  | Extract<keyof UserCreateOneWithoutActivitiesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutActivitiesInput {
  id?: string | null
  name?: string
  email?: string
  year?: number | null
  plan?: number | null
  privilege?: number | null
}
export type UserCreateWithoutActivitiesInputInputObject =
  | Extract<keyof UserCreateWithoutActivitiesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'year', alias?: string  } 
  | { name: 'plan', alias?: string  } 
  | { name: 'privilege', alias?: string  } 
  
export interface ActivityUpdateInput {
  code?: string | null
  type?: string | null
  xp?: number | null
  title?: string | null
  description?: string | null
  begin?: string | null
  end?: string | null
  registered?: UserPresenceUpdateManyWithoutActivityInput | null
}
export type ActivityUpdateInputInputObject =
  | Extract<keyof ActivityUpdateInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'begin', alias?: string  } 
  | { name: 'end', alias?: string  } 
  | { name: 'registered', alias?: string  } 
  
export interface UserPresenceUpdateManyWithoutActivityInput {
  create?: UserPresenceCreateWithoutActivityInput[]
  delete?: UserPresenceWhereUniqueInput[]
  connect?: UserPresenceWhereUniqueInput[]
  set?: UserPresenceWhereUniqueInput[]
  disconnect?: UserPresenceWhereUniqueInput[]
  update?: UserPresenceUpdateWithWhereUniqueWithoutActivityInput[]
  upsert?: UserPresenceUpsertWithWhereUniqueWithoutActivityInput[]
  deleteMany?: UserPresenceScalarWhereInput[]
  updateMany?: UserPresenceUpdateManyWithWhereNestedInput[]
}
export type UserPresenceUpdateManyWithoutActivityInputInputObject =
  | Extract<keyof UserPresenceUpdateManyWithoutActivityInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserPresenceUpdateWithWhereUniqueWithoutActivityInput {
  where?: UserPresenceWhereUniqueInput
  data?: UserPresenceUpdateWithoutActivityDataInput
}
export type UserPresenceUpdateWithWhereUniqueWithoutActivityInputInputObject =
  | Extract<keyof UserPresenceUpdateWithWhereUniqueWithoutActivityInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserPresenceUpdateWithoutActivityDataInput {
  code?: string | null
  user?: UserUpdateOneRequiredWithoutActivitiesInput | null
  presence?: boolean | null
  xp?: number | null
}
export type UserPresenceUpdateWithoutActivityDataInputInputObject =
  | Extract<keyof UserPresenceUpdateWithoutActivityDataInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'presence', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutActivitiesInput {
  create?: UserCreateWithoutActivitiesInput | null
  update?: UserUpdateWithoutActivitiesDataInput | null
  upsert?: UserUpsertWithoutActivitiesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutActivitiesInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutActivitiesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutActivitiesDataInput {
  name?: string | null
  email?: string | null
  year?: number | null
  plan?: number | null
  privilege?: number | null
}
export type UserUpdateWithoutActivitiesDataInputInputObject =
  | Extract<keyof UserUpdateWithoutActivitiesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'year', alias?: string  } 
  | { name: 'plan', alias?: string  } 
  | { name: 'privilege', alias?: string  } 
  
export interface UserUpsertWithoutActivitiesInput {
  update?: UserUpdateWithoutActivitiesDataInput
  create?: UserCreateWithoutActivitiesInput
}
export type UserUpsertWithoutActivitiesInputInputObject =
  | Extract<keyof UserUpsertWithoutActivitiesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserPresenceUpsertWithWhereUniqueWithoutActivityInput {
  where?: UserPresenceWhereUniqueInput
  update?: UserPresenceUpdateWithoutActivityDataInput
  create?: UserPresenceCreateWithoutActivityInput
}
export type UserPresenceUpsertWithWhereUniqueWithoutActivityInputInputObject =
  | Extract<keyof UserPresenceUpsertWithWhereUniqueWithoutActivityInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ActivityUpdateManyMutationInput {
  code?: string | null
  type?: string | null
  xp?: number | null
  title?: string | null
  description?: string | null
  begin?: string | null
  end?: string | null
}
export type ActivityUpdateManyMutationInputInputObject =
  | Extract<keyof ActivityUpdateManyMutationInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'begin', alias?: string  } 
  | { name: 'end', alias?: string  } 
  
export interface UserPresenceCreateInput {
  id?: string | null
  code?: string
  user?: UserCreateOneWithoutActivitiesInput
  activity?: ActivityCreateOneWithoutRegisteredInput
  presence?: boolean
  xp?: number
}
export type UserPresenceCreateInputInputObject =
  | Extract<keyof UserPresenceCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'activity', alias?: string  } 
  | { name: 'presence', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  
export interface UserPresenceUpdateInput {
  code?: string | null
  user?: UserUpdateOneRequiredWithoutActivitiesInput | null
  activity?: ActivityUpdateOneRequiredWithoutRegisteredInput | null
  presence?: boolean | null
  xp?: number | null
}
export type UserPresenceUpdateInputInputObject =
  | Extract<keyof UserPresenceUpdateInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'activity', alias?: string  } 
  | { name: 'presence', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  
export interface UserPresenceUpdateManyMutationInput {
  code?: string | null
  presence?: boolean | null
  xp?: number | null
}
export type UserPresenceUpdateManyMutationInputInputObject =
  | Extract<keyof UserPresenceUpdateManyMutationInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'presence', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  
export interface ExperienceProjectCreateInput {
  id?: string | null
  title?: string
  user?: string
  description?: string
  competencies?: string
  informations?: string
  status?: number
  messages?: ProjectMessagesCreateManyInput | null
}
export type ExperienceProjectCreateInputInputObject =
  | Extract<keyof ExperienceProjectCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'competencies', alias?: string  } 
  | { name: 'informations', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'messages', alias?: string  } 
  
export interface ProjectMessagesCreateManyInput {
  create?: ProjectMessagesCreateInput[]
  connect?: ProjectMessagesWhereUniqueInput[]
}
export type ProjectMessagesCreateManyInputInputObject =
  | Extract<keyof ProjectMessagesCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectMessagesCreateInput {
  id?: string | null
  author?: string
  date?: string
  message?: string
}
export type ProjectMessagesCreateInputInputObject =
  | Extract<keyof ProjectMessagesCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface ExperienceProjectUpdateInput {
  title?: string | null
  user?: string | null
  description?: string | null
  competencies?: string | null
  informations?: string | null
  status?: number | null
  messages?: ProjectMessagesUpdateManyInput | null
}
export type ExperienceProjectUpdateInputInputObject =
  | Extract<keyof ExperienceProjectUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'competencies', alias?: string  } 
  | { name: 'informations', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'messages', alias?: string  } 
  
export interface ProjectMessagesUpdateManyInput {
  create?: ProjectMessagesCreateInput[]
  update?: ProjectMessagesUpdateWithWhereUniqueNestedInput[]
  upsert?: ProjectMessagesUpsertWithWhereUniqueNestedInput[]
  delete?: ProjectMessagesWhereUniqueInput[]
  connect?: ProjectMessagesWhereUniqueInput[]
  set?: ProjectMessagesWhereUniqueInput[]
  disconnect?: ProjectMessagesWhereUniqueInput[]
  deleteMany?: ProjectMessagesScalarWhereInput[]
  updateMany?: ProjectMessagesUpdateManyWithWhereNestedInput[]
}
export type ProjectMessagesUpdateManyInputInputObject =
  | Extract<keyof ProjectMessagesUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectMessagesUpdateWithWhereUniqueNestedInput {
  where?: ProjectMessagesWhereUniqueInput
  data?: ProjectMessagesUpdateDataInput
}
export type ProjectMessagesUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ProjectMessagesUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectMessagesUpdateDataInput {
  author?: string | null
  date?: string | null
  message?: string | null
}
export type ProjectMessagesUpdateDataInputInputObject =
  | Extract<keyof ProjectMessagesUpdateDataInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface ProjectMessagesUpsertWithWhereUniqueNestedInput {
  where?: ProjectMessagesWhereUniqueInput
  update?: ProjectMessagesUpdateDataInput
  create?: ProjectMessagesCreateInput
}
export type ProjectMessagesUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ProjectMessagesUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectMessagesScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  author?: string | null
  author_not?: string | null
  author_in?: string[]
  author_not_in?: string[]
  author_lt?: string | null
  author_lte?: string | null
  author_gt?: string | null
  author_gte?: string | null
  author_contains?: string | null
  author_not_contains?: string | null
  author_starts_with?: string | null
  author_not_starts_with?: string | null
  author_ends_with?: string | null
  author_not_ends_with?: string | null
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  message?: string | null
  message_not?: string | null
  message_in?: string[]
  message_not_in?: string[]
  message_lt?: string | null
  message_lte?: string | null
  message_gt?: string | null
  message_gte?: string | null
  message_contains?: string | null
  message_not_contains?: string | null
  message_starts_with?: string | null
  message_not_starts_with?: string | null
  message_ends_with?: string | null
  message_not_ends_with?: string | null
  AND?: ProjectMessagesScalarWhereInput[]
  OR?: ProjectMessagesScalarWhereInput[]
  NOT?: ProjectMessagesScalarWhereInput[]
}
export type ProjectMessagesScalarWhereInputInputObject =
  | Extract<keyof ProjectMessagesScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'author_not', alias?: string  } 
  | { name: 'author_in', alias?: string  } 
  | { name: 'author_not_in', alias?: string  } 
  | { name: 'author_lt', alias?: string  } 
  | { name: 'author_lte', alias?: string  } 
  | { name: 'author_gt', alias?: string  } 
  | { name: 'author_gte', alias?: string  } 
  | { name: 'author_contains', alias?: string  } 
  | { name: 'author_not_contains', alias?: string  } 
  | { name: 'author_starts_with', alias?: string  } 
  | { name: 'author_not_starts_with', alias?: string  } 
  | { name: 'author_ends_with', alias?: string  } 
  | { name: 'author_not_ends_with', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'message_not', alias?: string  } 
  | { name: 'message_in', alias?: string  } 
  | { name: 'message_not_in', alias?: string  } 
  | { name: 'message_lt', alias?: string  } 
  | { name: 'message_lte', alias?: string  } 
  | { name: 'message_gt', alias?: string  } 
  | { name: 'message_gte', alias?: string  } 
  | { name: 'message_contains', alias?: string  } 
  | { name: 'message_not_contains', alias?: string  } 
  | { name: 'message_starts_with', alias?: string  } 
  | { name: 'message_not_starts_with', alias?: string  } 
  | { name: 'message_ends_with', alias?: string  } 
  | { name: 'message_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectMessagesUpdateManyWithWhereNestedInput {
  where?: ProjectMessagesScalarWhereInput
  data?: ProjectMessagesUpdateManyDataInput
}
export type ProjectMessagesUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProjectMessagesUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectMessagesUpdateManyDataInput {
  author?: string | null
  date?: string | null
  message?: string | null
}
export type ProjectMessagesUpdateManyDataInputInputObject =
  | Extract<keyof ProjectMessagesUpdateManyDataInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface ExperienceProjectUpdateManyMutationInput {
  title?: string | null
  user?: string | null
  description?: string | null
  competencies?: string | null
  informations?: string | null
  status?: number | null
}
export type ExperienceProjectUpdateManyMutationInputInputObject =
  | Extract<keyof ExperienceProjectUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'competencies', alias?: string  } 
  | { name: 'informations', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface MakerCreateInput {
  id?: string | null
  title?: string
  co_workers?: MakerCreateco_workersInput | null
  description?: string
  functionalities?: string
  technologies?: string
  delivery?: string
  organisation?: string
  resources?: string
  informations?: string
  xp?: number | null
  status?: number
  messages?: ProjectMessagesCreateManyInput | null
}
export type MakerCreateInputInputObject =
  | Extract<keyof MakerCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'co_workers', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'functionalities', alias?: string  } 
  | { name: 'technologies', alias?: string  } 
  | { name: 'delivery', alias?: string  } 
  | { name: 'organisation', alias?: string  } 
  | { name: 'resources', alias?: string  } 
  | { name: 'informations', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'messages', alias?: string  } 
  
export interface MakerCreateco_workersInput {
  set?: string[]
}
export type MakerCreateco_workersInputInputObject =
  | Extract<keyof MakerCreateco_workersInput, string>
  | { name: 'set', alias?: string  } 
  
export interface MakerUpdateInput {
  title?: string | null
  co_workers?: MakerUpdateco_workersInput | null
  description?: string | null
  functionalities?: string | null
  technologies?: string | null
  delivery?: string | null
  organisation?: string | null
  resources?: string | null
  informations?: string | null
  xp?: number | null
  status?: number | null
  messages?: ProjectMessagesUpdateManyInput | null
}
export type MakerUpdateInputInputObject =
  | Extract<keyof MakerUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'co_workers', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'functionalities', alias?: string  } 
  | { name: 'technologies', alias?: string  } 
  | { name: 'delivery', alias?: string  } 
  | { name: 'organisation', alias?: string  } 
  | { name: 'resources', alias?: string  } 
  | { name: 'informations', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'messages', alias?: string  } 
  
export interface MakerUpdateco_workersInput {
  set?: string[]
}
export type MakerUpdateco_workersInputInputObject =
  | Extract<keyof MakerUpdateco_workersInput, string>
  | { name: 'set', alias?: string  } 
  
export interface MakerUpdateManyMutationInput {
  title?: string | null
  co_workers?: MakerUpdateco_workersInput | null
  description?: string | null
  functionalities?: string | null
  technologies?: string | null
  delivery?: string | null
  organisation?: string | null
  resources?: string | null
  informations?: string | null
  xp?: number | null
  status?: number | null
}
export type MakerUpdateManyMutationInputInputObject =
  | Extract<keyof MakerUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'co_workers', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'functionalities', alias?: string  } 
  | { name: 'technologies', alias?: string  } 
  | { name: 'delivery', alias?: string  } 
  | { name: 'organisation', alias?: string  } 
  | { name: 'resources', alias?: string  } 
  | { name: 'informations', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface SharingCreateInput {
  id?: string | null
  title?: string
  co_workers?: SharingCreateco_workersInput | null
  description?: string
  date?: string
  xp?: number | null
  status?: number
  messages?: ProjectMessagesCreateManyInput | null
}
export type SharingCreateInputInputObject =
  | Extract<keyof SharingCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'co_workers', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'messages', alias?: string  } 
  
export interface SharingCreateco_workersInput {
  set?: string[]
}
export type SharingCreateco_workersInputInputObject =
  | Extract<keyof SharingCreateco_workersInput, string>
  | { name: 'set', alias?: string  } 
  
export interface SharingUpdateInput {
  title?: string | null
  co_workers?: SharingUpdateco_workersInput | null
  description?: string | null
  date?: string | null
  xp?: number | null
  status?: number | null
  messages?: ProjectMessagesUpdateManyInput | null
}
export type SharingUpdateInputInputObject =
  | Extract<keyof SharingUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'co_workers', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'messages', alias?: string  } 
  
export interface SharingUpdateco_workersInput {
  set?: string[]
}
export type SharingUpdateco_workersInputInputObject =
  | Extract<keyof SharingUpdateco_workersInput, string>
  | { name: 'set', alias?: string  } 
  
export interface SharingUpdateManyMutationInput {
  title?: string | null
  co_workers?: SharingUpdateco_workersInput | null
  description?: string | null
  date?: string | null
  xp?: number | null
  status?: number | null
}
export type SharingUpdateManyMutationInputInputObject =
  | Extract<keyof SharingUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'co_workers', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'xp', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface ProjectMessagesUpdateInput {
  author?: string | null
  date?: string | null
  message?: string | null
}
export type ProjectMessagesUpdateInputInputObject =
  | Extract<keyof ProjectMessagesUpdateInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface ProjectMessagesUpdateManyMutationInput {
  author?: string | null
  date?: string | null
  message?: string | null
}
export type ProjectMessagesUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectMessagesUpdateManyMutationInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface DatabaseRefreshCreateInput {
  id?: string | null
  date?: string
}
export type DatabaseRefreshCreateInputInputObject =
  | Extract<keyof DatabaseRefreshCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'date', alias?: string  } 
  
export interface DatabaseRefreshUpdateInput {
  date?: string | null
}
export type DatabaseRefreshUpdateInputInputObject =
  | Extract<keyof DatabaseRefreshUpdateInput, string>
  | { name: 'date', alias?: string  } 
  
export interface DatabaseRefreshUpdateManyMutationInput {
  date?: string | null
}
export type DatabaseRefreshUpdateManyMutationInputInputObject =
  | Extract<keyof DatabaseRefreshUpdateManyMutationInput, string>
  | { name: 'date', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ActivitySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ActivityWhereInput | null
  AND?: ActivitySubscriptionWhereInput[]
}
export type ActivitySubscriptionWhereInputInputObject =
  | Extract<keyof ActivitySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface UserPresenceSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserPresenceWhereInput | null
  AND?: UserPresenceSubscriptionWhereInput[]
}
export type UserPresenceSubscriptionWhereInputInputObject =
  | Extract<keyof UserPresenceSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ExperienceProjectSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ExperienceProjectWhereInput | null
  AND?: ExperienceProjectSubscriptionWhereInput[]
}
export type ExperienceProjectSubscriptionWhereInputInputObject =
  | Extract<keyof ExperienceProjectSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface MakerSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MakerWhereInput | null
  AND?: MakerSubscriptionWhereInput[]
}
export type MakerSubscriptionWhereInputInputObject =
  | Extract<keyof MakerSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface SharingSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SharingWhereInput | null
  AND?: SharingSubscriptionWhereInput[]
}
export type SharingSubscriptionWhereInputInputObject =
  | Extract<keyof SharingSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ProjectMessagesSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectMessagesWhereInput | null
  AND?: ProjectMessagesSubscriptionWhereInput[]
}
export type ProjectMessagesSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectMessagesSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface DatabaseRefreshSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: DatabaseRefreshWhereInput | null
  AND?: DatabaseRefreshSubscriptionWhereInput[]
}
export type DatabaseRefreshSubscriptionWhereInputInputObject =
  | Extract<keyof DatabaseRefreshSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  

export type UserPresenceOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'code_ASC'
  | 'code_DESC'
  | 'presence_ASC'
  | 'presence_DESC'
  | 'xp_ASC'
  | 'xp_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'year_ASC'
  | 'year_DESC'
  | 'plan_ASC'
  | 'plan_DESC'
  | 'privilege_ASC'
  | 'privilege_DESC'
  
export type ActivityOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'code_ASC'
  | 'code_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'xp_ASC'
  | 'xp_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'begin_ASC'
  | 'begin_DESC'
  | 'end_ASC'
  | 'end_DESC'
  
export type ProjectMessagesOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'author_ASC'
  | 'author_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'message_ASC'
  | 'message_DESC'
  
export type ExperienceProjectOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'user_ASC'
  | 'user_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'competencies_ASC'
  | 'competencies_DESC'
  | 'informations_ASC'
  | 'informations_DESC'
  | 'status_ASC'
  | 'status_DESC'
  
export type MakerOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'functionalities_ASC'
  | 'functionalities_DESC'
  | 'technologies_ASC'
  | 'technologies_DESC'
  | 'delivery_ASC'
  | 'delivery_DESC'
  | 'organisation_ASC'
  | 'organisation_DESC'
  | 'resources_ASC'
  | 'resources_DESC'
  | 'informations_ASC'
  | 'informations_DESC'
  | 'xp_ASC'
  | 'xp_DESC'
  | 'status_ASC'
  | 'status_DESC'
  
export type SharingOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'xp_ASC'
  | 'xp_DESC'
  | 'status_ASC'
  | 'status_DESC'
  
export type DatabaseRefreshOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'date_ASC'
  | 'date_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  