// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  activity: (where?: ActivityWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userPresence: (where?: UserPresenceWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  activity: (where: ActivityWhereUniqueInput) => ActivityNullablePromise;
  activities: (args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Activity>;
  activitiesConnection: (args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActivityConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userPresence: (
    where: UserPresenceWhereUniqueInput
  ) => UserPresenceNullablePromise;
  userPresences: (args?: {
    where?: UserPresenceWhereInput;
    orderBy?: UserPresenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserPresence>;
  userPresencesConnection: (args?: {
    where?: UserPresenceWhereInput;
    orderBy?: UserPresenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserPresenceConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createActivity: (data: ActivityCreateInput) => ActivityPromise;
  updateActivity: (args: {
    data: ActivityUpdateInput;
    where: ActivityWhereUniqueInput;
  }) => ActivityPromise;
  updateManyActivities: (args: {
    data: ActivityUpdateManyMutationInput;
    where?: ActivityWhereInput;
  }) => BatchPayloadPromise;
  upsertActivity: (args: {
    where: ActivityWhereUniqueInput;
    create: ActivityCreateInput;
    update: ActivityUpdateInput;
  }) => ActivityPromise;
  deleteActivity: (where: ActivityWhereUniqueInput) => ActivityPromise;
  deleteManyActivities: (where?: ActivityWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserPresence: (data: UserPresenceCreateInput) => UserPresencePromise;
  updateUserPresence: (args: {
    data: UserPresenceUpdateInput;
    where: UserPresenceWhereUniqueInput;
  }) => UserPresencePromise;
  updateManyUserPresences: (args: {
    data: UserPresenceUpdateManyMutationInput;
    where?: UserPresenceWhereInput;
  }) => BatchPayloadPromise;
  upsertUserPresence: (args: {
    where: UserPresenceWhereUniqueInput;
    create: UserPresenceCreateInput;
    update: UserPresenceUpdateInput;
  }) => UserPresencePromise;
  deleteUserPresence: (
    where: UserPresenceWhereUniqueInput
  ) => UserPresencePromise;
  deleteManyUserPresences: (
    where?: UserPresenceWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  activity: (
    where?: ActivitySubscriptionWhereInput
  ) => ActivitySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userPresence: (
    where?: UserPresenceSubscriptionWhereInput
  ) => UserPresenceSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserPresenceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "presence_ASC"
  | "presence_DESC"
  | "xp_ASC"
  | "xp_DESC";

export type ActivityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "type_ASC"
  | "type_DESC"
  | "xp_ASC"
  | "xp_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "begin_ASC"
  | "begin_DESC"
  | "end_ASC"
  | "end_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "outlookId_ASC"
  | "outlookId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "year_ASC"
  | "year_DESC"
  | "plan_ASC"
  | "plan_DESC"
  | "privilege_ASC"
  | "privilege_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateOneRequiredWithoutActivitiesInput {
  create?: Maybe<UserCreateWithoutActivitiesInput>;
  update?: Maybe<UserUpdateWithoutActivitiesDataInput>;
  upsert?: Maybe<UserUpsertWithoutActivitiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type ActivityWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export interface UserPresenceUpsertWithWhereUniqueWithoutActivityInput {
  where: UserPresenceWhereUniqueInput;
  update: UserPresenceUpdateWithoutActivityDataInput;
  create: UserPresenceCreateWithoutActivityInput;
}

export interface UserPresenceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  activity?: Maybe<ActivityWhereInput>;
  presence?: Maybe<Boolean>;
  presence_not?: Maybe<Boolean>;
  xp?: Maybe<Int>;
  xp_not?: Maybe<Int>;
  xp_in?: Maybe<Int[] | Int>;
  xp_not_in?: Maybe<Int[] | Int>;
  xp_lt?: Maybe<Int>;
  xp_lte?: Maybe<Int>;
  xp_gt?: Maybe<Int>;
  xp_gte?: Maybe<Int>;
  AND?: Maybe<UserPresenceWhereInput[] | UserPresenceWhereInput>;
}

export interface UserPresenceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  presence?: Maybe<Boolean>;
  presence_not?: Maybe<Boolean>;
  xp?: Maybe<Int>;
  xp_not?: Maybe<Int>;
  xp_in?: Maybe<Int[] | Int>;
  xp_not_in?: Maybe<Int[] | Int>;
  xp_lt?: Maybe<Int>;
  xp_lte?: Maybe<Int>;
  xp_gt?: Maybe<Int>;
  xp_gte?: Maybe<Int>;
  AND?: Maybe<UserPresenceScalarWhereInput[] | UserPresenceScalarWhereInput>;
  OR?: Maybe<UserPresenceScalarWhereInput[] | UserPresenceScalarWhereInput>;
  NOT?: Maybe<UserPresenceScalarWhereInput[] | UserPresenceScalarWhereInput>;
}

export interface ActivityWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  xp?: Maybe<Int>;
  xp_not?: Maybe<Int>;
  xp_in?: Maybe<Int[] | Int>;
  xp_not_in?: Maybe<Int[] | Int>;
  xp_lt?: Maybe<Int>;
  xp_lte?: Maybe<Int>;
  xp_gt?: Maybe<Int>;
  xp_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  begin?: Maybe<DateTimeInput>;
  begin_not?: Maybe<DateTimeInput>;
  begin_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  begin_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  begin_lt?: Maybe<DateTimeInput>;
  begin_lte?: Maybe<DateTimeInput>;
  begin_gt?: Maybe<DateTimeInput>;
  begin_gte?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  end_not?: Maybe<DateTimeInput>;
  end_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_lt?: Maybe<DateTimeInput>;
  end_lte?: Maybe<DateTimeInput>;
  end_gt?: Maybe<DateTimeInput>;
  end_gte?: Maybe<DateTimeInput>;
  registered_some?: Maybe<UserPresenceWhereInput>;
  AND?: Maybe<ActivityWhereInput[] | ActivityWhereInput>;
}

export interface UserPresenceCreateWithoutActivityInput {
  id?: Maybe<ID_Input>;
  code: String;
  user: UserCreateOneWithoutActivitiesInput;
  presence: Boolean;
  xp: Int;
}

export interface UserPresenceCreateManyWithoutUserInput {
  create?: Maybe<
    UserPresenceCreateWithoutUserInput[] | UserPresenceCreateWithoutUserInput
  >;
  connect?: Maybe<
    UserPresenceWhereUniqueInput[] | UserPresenceWhereUniqueInput
  >;
}

export interface UserCreateOneWithoutActivitiesInput {
  create?: Maybe<UserCreateWithoutActivitiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserPresenceUpdateManyWithWhereNestedInput {
  where: UserPresenceScalarWhereInput;
  data: UserPresenceUpdateManyDataInput;
}

export interface UserCreateWithoutActivitiesInput {
  id?: Maybe<ID_Input>;
  outlookId: String;
  name: String;
  email: String;
  year?: Maybe<Int>;
  plan?: Maybe<Int>;
  privilege?: Maybe<Int>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ActivityUpdateInput {
  code?: Maybe<String>;
  type?: Maybe<String>;
  xp?: Maybe<Int>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  begin?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  registered?: Maybe<UserPresenceUpdateManyWithoutActivityInput>;
}

export interface UserPresenceUpdateManyMutationInput {
  code?: Maybe<String>;
  presence?: Maybe<Boolean>;
  xp?: Maybe<Int>;
}

export interface UserPresenceUpdateManyWithoutActivityInput {
  create?: Maybe<
    | UserPresenceCreateWithoutActivityInput[]
    | UserPresenceCreateWithoutActivityInput
  >;
  delete?: Maybe<UserPresenceWhereUniqueInput[] | UserPresenceWhereUniqueInput>;
  connect?: Maybe<
    UserPresenceWhereUniqueInput[] | UserPresenceWhereUniqueInput
  >;
  set?: Maybe<UserPresenceWhereUniqueInput[] | UserPresenceWhereUniqueInput>;
  disconnect?: Maybe<
    UserPresenceWhereUniqueInput[] | UserPresenceWhereUniqueInput
  >;
  update?: Maybe<
    | UserPresenceUpdateWithWhereUniqueWithoutActivityInput[]
    | UserPresenceUpdateWithWhereUniqueWithoutActivityInput
  >;
  upsert?: Maybe<
    | UserPresenceUpsertWithWhereUniqueWithoutActivityInput[]
    | UserPresenceUpsertWithWhereUniqueWithoutActivityInput
  >;
  deleteMany?: Maybe<
    UserPresenceScalarWhereInput[] | UserPresenceScalarWhereInput
  >;
  updateMany?: Maybe<
    | UserPresenceUpdateManyWithWhereNestedInput[]
    | UserPresenceUpdateManyWithWhereNestedInput
  >;
}

export interface UserPresenceCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  user: UserCreateOneWithoutActivitiesInput;
  activity: ActivityCreateOneWithoutRegisteredInput;
  presence: Boolean;
  xp: Int;
}

export interface UserPresenceUpdateWithWhereUniqueWithoutActivityInput {
  where: UserPresenceWhereUniqueInput;
  data: UserPresenceUpdateWithoutActivityDataInput;
}

export interface UserUpdateManyMutationInput {
  outlookId?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  year?: Maybe<Int>;
  plan?: Maybe<Int>;
  privilege?: Maybe<Int>;
}

export interface UserPresenceUpdateWithoutActivityDataInput {
  code?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutActivitiesInput>;
  presence?: Maybe<Boolean>;
  xp?: Maybe<Int>;
}

export interface ActivityUpsertWithoutRegisteredInput {
  update: ActivityUpdateWithoutRegisteredDataInput;
  create: ActivityCreateWithoutRegisteredInput;
}

export interface UserPresenceUpdateManyWithoutUserInput {
  create?: Maybe<
    UserPresenceCreateWithoutUserInput[] | UserPresenceCreateWithoutUserInput
  >;
  delete?: Maybe<UserPresenceWhereUniqueInput[] | UserPresenceWhereUniqueInput>;
  connect?: Maybe<
    UserPresenceWhereUniqueInput[] | UserPresenceWhereUniqueInput
  >;
  set?: Maybe<UserPresenceWhereUniqueInput[] | UserPresenceWhereUniqueInput>;
  disconnect?: Maybe<
    UserPresenceWhereUniqueInput[] | UserPresenceWhereUniqueInput
  >;
  update?: Maybe<
    | UserPresenceUpdateWithWhereUniqueWithoutUserInput[]
    | UserPresenceUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | UserPresenceUpsertWithWhereUniqueWithoutUserInput[]
    | UserPresenceUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    UserPresenceScalarWhereInput[] | UserPresenceScalarWhereInput
  >;
  updateMany?: Maybe<
    | UserPresenceUpdateManyWithWhereNestedInput[]
    | UserPresenceUpdateManyWithWhereNestedInput
  >;
}

export type UserPresenceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export interface UserUpdateWithoutActivitiesDataInput {
  outlookId?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  year?: Maybe<Int>;
  plan?: Maybe<Int>;
  privilege?: Maybe<Int>;
}

export interface UserPresenceUpdateWithoutUserDataInput {
  code?: Maybe<String>;
  activity?: Maybe<ActivityUpdateOneRequiredWithoutRegisteredInput>;
  presence?: Maybe<Boolean>;
  xp?: Maybe<Int>;
}

export interface UserUpsertWithoutActivitiesInput {
  update: UserUpdateWithoutActivitiesDataInput;
  create: UserCreateWithoutActivitiesInput;
}

export interface UserPresenceCreateManyWithoutActivityInput {
  create?: Maybe<
    | UserPresenceCreateWithoutActivityInput[]
    | UserPresenceCreateWithoutActivityInput
  >;
  connect?: Maybe<
    UserPresenceWhereUniqueInput[] | UserPresenceWhereUniqueInput
  >;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  outlookId?: Maybe<String>;
  outlookId_not?: Maybe<String>;
  outlookId_in?: Maybe<String[] | String>;
  outlookId_not_in?: Maybe<String[] | String>;
  outlookId_lt?: Maybe<String>;
  outlookId_lte?: Maybe<String>;
  outlookId_gt?: Maybe<String>;
  outlookId_gte?: Maybe<String>;
  outlookId_contains?: Maybe<String>;
  outlookId_not_contains?: Maybe<String>;
  outlookId_starts_with?: Maybe<String>;
  outlookId_not_starts_with?: Maybe<String>;
  outlookId_ends_with?: Maybe<String>;
  outlookId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  year?: Maybe<Int>;
  year_not?: Maybe<Int>;
  year_in?: Maybe<Int[] | Int>;
  year_not_in?: Maybe<Int[] | Int>;
  year_lt?: Maybe<Int>;
  year_lte?: Maybe<Int>;
  year_gt?: Maybe<Int>;
  year_gte?: Maybe<Int>;
  plan?: Maybe<Int>;
  plan_not?: Maybe<Int>;
  plan_in?: Maybe<Int[] | Int>;
  plan_not_in?: Maybe<Int[] | Int>;
  plan_lt?: Maybe<Int>;
  plan_lte?: Maybe<Int>;
  plan_gt?: Maybe<Int>;
  plan_gte?: Maybe<Int>;
  privilege?: Maybe<Int>;
  privilege_not?: Maybe<Int>;
  privilege_in?: Maybe<Int[] | Int>;
  privilege_not_in?: Maybe<Int[] | Int>;
  privilege_lt?: Maybe<Int>;
  privilege_lte?: Maybe<Int>;
  privilege_gt?: Maybe<Int>;
  privilege_gte?: Maybe<Int>;
  activities_some?: Maybe<UserPresenceWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ActivitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ActivityWhereInput>;
  AND?: Maybe<
    ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput
  >;
}

export interface UserUpdateInput {
  outlookId?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  year?: Maybe<Int>;
  plan?: Maybe<Int>;
  privilege?: Maybe<Int>;
  activities?: Maybe<UserPresenceUpdateManyWithoutUserInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  outlookId?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface ActivityCreateWithoutRegisteredInput {
  id?: Maybe<ID_Input>;
  code: String;
  type: String;
  xp?: Maybe<Int>;
  title: String;
  description?: Maybe<String>;
  begin?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
}

export interface ActivityUpdateWithoutRegisteredDataInput {
  code?: Maybe<String>;
  type?: Maybe<String>;
  xp?: Maybe<Int>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  begin?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
}

export interface UserPresenceUpdateManyDataInput {
  code?: Maybe<String>;
  presence?: Maybe<Boolean>;
  xp?: Maybe<Int>;
}

export interface UserPresenceUpdateWithWhereUniqueWithoutUserInput {
  where: UserPresenceWhereUniqueInput;
  data: UserPresenceUpdateWithoutUserDataInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  outlookId: String;
  name: String;
  email: String;
  year?: Maybe<Int>;
  plan?: Maybe<Int>;
  privilege?: Maybe<Int>;
  activities?: Maybe<UserPresenceCreateManyWithoutUserInput>;
}

export interface UserPresenceCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  code: String;
  activity: ActivityCreateOneWithoutRegisteredInput;
  presence: Boolean;
  xp: Int;
}

export interface ActivityCreateOneWithoutRegisteredInput {
  create?: Maybe<ActivityCreateWithoutRegisteredInput>;
  connect?: Maybe<ActivityWhereUniqueInput>;
}

export interface ActivityUpdateManyMutationInput {
  code?: Maybe<String>;
  type?: Maybe<String>;
  xp?: Maybe<Int>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  begin?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
}

export interface ActivityCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  type: String;
  xp?: Maybe<Int>;
  title: String;
  description?: Maybe<String>;
  begin?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  registered?: Maybe<UserPresenceCreateManyWithoutActivityInput>;
}

export interface ActivityUpdateOneRequiredWithoutRegisteredInput {
  create?: Maybe<ActivityCreateWithoutRegisteredInput>;
  update?: Maybe<ActivityUpdateWithoutRegisteredDataInput>;
  upsert?: Maybe<ActivityUpsertWithoutRegisteredInput>;
  connect?: Maybe<ActivityWhereUniqueInput>;
}

export interface UserPresenceUpsertWithWhereUniqueWithoutUserInput {
  where: UserPresenceWhereUniqueInput;
  update: UserPresenceUpdateWithoutUserDataInput;
  create: UserPresenceCreateWithoutUserInput;
}

export interface UserPresenceUpdateInput {
  code?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutActivitiesInput>;
  activity?: Maybe<ActivityUpdateOneRequiredWithoutRegisteredInput>;
  presence?: Maybe<Boolean>;
  xp?: Maybe<Int>;
}

export interface UserPresenceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserPresenceWhereInput>;
  AND?: Maybe<
    UserPresenceSubscriptionWhereInput[] | UserPresenceSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPresencePreviousValues {
  id: ID_Output;
  code: String;
  presence: Boolean;
  xp: Int;
}

export interface UserPresencePreviousValuesPromise
  extends Promise<UserPresencePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  presence: () => Promise<Boolean>;
  xp: () => Promise<Int>;
}

export interface UserPresencePreviousValuesSubscription
  extends Promise<AsyncIterator<UserPresencePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  presence: () => Promise<AsyncIterator<Boolean>>;
  xp: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Activity {
  id: ID_Output;
  code: String;
  type: String;
  xp?: Int;
  title: String;
  description?: String;
  begin?: DateTimeOutput;
  end?: DateTimeOutput;
}

export interface ActivityPromise extends Promise<Activity>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  type: () => Promise<String>;
  xp: () => Promise<Int>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  begin: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  registered: <T = FragmentableArray<UserPresence>>(args?: {
    where?: UserPresenceWhereInput;
    orderBy?: UserPresenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ActivitySubscription
  extends Promise<AsyncIterator<Activity>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  xp: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  begin: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  registered: <T = Promise<AsyncIterator<UserPresenceSubscription>>>(args?: {
    where?: UserPresenceWhereInput;
    orderBy?: UserPresenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ActivityNullablePromise
  extends Promise<Activity | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  type: () => Promise<String>;
  xp: () => Promise<Int>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  begin: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  registered: <T = FragmentableArray<UserPresence>>(args?: {
    where?: UserPresenceWhereInput;
    orderBy?: UserPresenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateActivity {
  count: Int;
}

export interface AggregateActivityPromise
  extends Promise<AggregateActivity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActivitySubscription
  extends Promise<AsyncIterator<AggregateActivity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserPresenceSubscriptionPayload {
  mutation: MutationType;
  node: UserPresence;
  updatedFields: String[];
  previousValues: UserPresencePreviousValues;
}

export interface UserPresenceSubscriptionPayloadPromise
  extends Promise<UserPresenceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPresencePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPresencePreviousValuesPromise>() => T;
}

export interface UserPresenceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserPresenceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserPresenceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPresencePreviousValuesSubscription>() => T;
}

export interface ActivityEdge {
  node: Activity;
  cursor: String;
}

export interface ActivityEdgePromise
  extends Promise<ActivityEdge>,
    Fragmentable {
  node: <T = ActivityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActivityEdgeSubscription
  extends Promise<AsyncIterator<ActivityEdge>>,
    Fragmentable {
  node: <T = ActivitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserPresence {
  count: Int;
}

export interface AggregateUserPresencePromise
  extends Promise<AggregateUserPresence>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserPresenceSubscription
  extends Promise<AsyncIterator<AggregateUserPresence>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPresenceConnection {
  pageInfo: PageInfo;
  edges: UserPresenceEdge[];
}

export interface UserPresenceConnectionPromise
  extends Promise<UserPresenceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserPresenceEdge>>() => T;
  aggregate: <T = AggregateUserPresencePromise>() => T;
}

export interface UserPresenceConnectionSubscription
  extends Promise<AsyncIterator<UserPresenceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserPresenceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserPresenceSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ActivityPreviousValues {
  id: ID_Output;
  code: String;
  type: String;
  xp?: Int;
  title: String;
  description?: String;
  begin?: DateTimeOutput;
  end?: DateTimeOutput;
}

export interface ActivityPreviousValuesPromise
  extends Promise<ActivityPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  type: () => Promise<String>;
  xp: () => Promise<Int>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  begin: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
}

export interface ActivityPreviousValuesSubscription
  extends Promise<AsyncIterator<ActivityPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  xp: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  begin: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ActivitySubscriptionPayload {
  mutation: MutationType;
  node: Activity;
  updatedFields: String[];
  previousValues: ActivityPreviousValues;
}

export interface ActivitySubscriptionPayloadPromise
  extends Promise<ActivitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActivityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActivityPreviousValuesPromise>() => T;
}

export interface ActivitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActivitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActivitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActivityPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  outlookId: String;
  name: String;
  email: String;
  year?: Int;
  plan?: Int;
  privilege?: Int;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  outlookId: () => Promise<String>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  year: () => Promise<Int>;
  plan: () => Promise<Int>;
  privilege: () => Promise<Int>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  outlookId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<Int>>;
  plan: () => Promise<AsyncIterator<Int>>;
  privilege: () => Promise<AsyncIterator<Int>>;
}

export interface ActivityConnection {
  pageInfo: PageInfo;
  edges: ActivityEdge[];
}

export interface ActivityConnectionPromise
  extends Promise<ActivityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActivityEdge>>() => T;
  aggregate: <T = AggregateActivityPromise>() => T;
}

export interface ActivityConnectionSubscription
  extends Promise<AsyncIterator<ActivityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActivityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActivitySubscription>() => T;
}

export interface UserPresence {
  id: ID_Output;
  code: String;
  presence: Boolean;
  xp: Int;
}

export interface UserPresencePromise
  extends Promise<UserPresence>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  user: <T = UserPromise>() => T;
  activity: <T = ActivityPromise>() => T;
  presence: () => Promise<Boolean>;
  xp: () => Promise<Int>;
}

export interface UserPresenceSubscription
  extends Promise<AsyncIterator<UserPresence>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  activity: <T = ActivitySubscription>() => T;
  presence: () => Promise<AsyncIterator<Boolean>>;
  xp: () => Promise<AsyncIterator<Int>>;
}

export interface UserPresenceNullablePromise
  extends Promise<UserPresence | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  user: <T = UserPromise>() => T;
  activity: <T = ActivityPromise>() => T;
  presence: () => Promise<Boolean>;
  xp: () => Promise<Int>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserPresenceEdge {
  node: UserPresence;
  cursor: String;
}

export interface UserPresenceEdgePromise
  extends Promise<UserPresenceEdge>,
    Fragmentable {
  node: <T = UserPresencePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserPresenceEdgeSubscription
  extends Promise<AsyncIterator<UserPresenceEdge>>,
    Fragmentable {
  node: <T = UserPresenceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  outlookId: String;
  name: String;
  email: String;
  year?: Int;
  plan?: Int;
  privilege?: Int;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  outlookId: () => Promise<String>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  year: () => Promise<Int>;
  plan: () => Promise<Int>;
  privilege: () => Promise<Int>;
  activities: <T = FragmentableArray<UserPresence>>(args?: {
    where?: UserPresenceWhereInput;
    orderBy?: UserPresenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  outlookId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<Int>>;
  plan: () => Promise<AsyncIterator<Int>>;
  privilege: () => Promise<AsyncIterator<Int>>;
  activities: <T = Promise<AsyncIterator<UserPresenceSubscription>>>(args?: {
    where?: UserPresenceWhereInput;
    orderBy?: UserPresenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  outlookId: () => Promise<String>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  year: () => Promise<Int>;
  plan: () => Promise<Int>;
  privilege: () => Promise<Int>;
  activities: <T = FragmentableArray<UserPresence>>(args?: {
    where?: UserPresenceWhereInput;
    orderBy?: UserPresenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Activity",
    embedded: false
  },
  {
    name: "UserPresence",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://prisma:4466`
});
export const prisma = new Prisma();
